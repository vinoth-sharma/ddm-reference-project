/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Pipe } from '@angular/core';
import { isNumberFinite, isPositive, isInteger, toDecimal } from '../utils/utils';
var BytesPipe = /** @class */ (function () {
    function BytesPipe() {
    }
    /**
     * @param {?} input
     * @param {?=} decimal
     * @param {?=} from
     * @param {?=} to
     * @return {?}
     */
    BytesPipe.prototype.transform = /**
     * @param {?} input
     * @param {?=} decimal
     * @param {?=} from
     * @param {?=} to
     * @return {?}
     */
    function (input, decimal, from, to) {
        if (decimal === void 0) { decimal = 0; }
        if (from === void 0) { from = 'B'; }
        if (!(isNumberFinite(input) &&
            isNumberFinite(decimal) &&
            isInteger(decimal) &&
            isPositive(decimal))) {
            return input;
        }
        /** @type {?} */
        var bytes = input;
        /** @type {?} */
        var unit = from;
        while (unit !== 'B') {
            bytes *= 1024;
            unit = (/** @type {?} */ (BytesPipe.formats[unit].prev));
        }
        if (to) {
            /** @type {?} */
            var format = BytesPipe.formats[to];
            /** @type {?} */
            var result = toDecimal(BytesPipe.calculateResult(format, bytes), decimal);
            return BytesPipe.formatResult(result, to);
        }
        for (var key in BytesPipe.formats) {
            /** @type {?} */
            var format = BytesPipe.formats[key];
            if (bytes < format.max) {
                /** @type {?} */
                var result = toDecimal(BytesPipe.calculateResult(format, bytes), decimal);
                return BytesPipe.formatResult(result, key);
            }
        }
    };
    /**
     * @param {?} result
     * @param {?} unit
     * @return {?}
     */
    BytesPipe.formatResult = /**
     * @param {?} result
     * @param {?} unit
     * @return {?}
     */
    function (result, unit) {
        return result + " " + unit;
    };
    /**
     * @param {?} format
     * @param {?} bytes
     * @return {?}
     */
    BytesPipe.calculateResult = /**
     * @param {?} format
     * @param {?} bytes
     * @return {?}
     */
    function (format, bytes) {
        /** @type {?} */
        var prev = format.prev ? BytesPipe.formats[format.prev] : undefined;
        return prev ? bytes / prev.max : bytes;
    };
    BytesPipe.formats = {
        'B': { max: 1024 },
        'kB': { max: Math.pow(1024, 2), prev: 'B' },
        'KB': { max: Math.pow(1024, 2), prev: 'B' },
        // Backward compatible
        'MB': { max: Math.pow(1024, 3), prev: 'kB' },
        'GB': { max: Math.pow(1024, 4), prev: 'MB' },
        'TB': { max: Number.MAX_SAFE_INTEGER, prev: 'GB' }
    };
    BytesPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'bytes'
                },] }
    ];
    return BytesPipe;
}());
export { BytesPipe };
if (false) {
    /** @type {?} */
    BytesPipe.formats;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnl0ZXMucGlwZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItcGlwZXMvIiwic291cmNlcyI6WyJtYXRoL2J5dGVzLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBQ3BELE9BQU8sRUFBRSxjQUFjLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUtsRjtJQUFBO0lBMERBLENBQUM7Ozs7Ozs7O0lBM0NHLDZCQUFTOzs7Ozs7O0lBQVQsVUFBVSxLQUFVLEVBQUUsT0FBbUIsRUFBRSxJQUFvQixFQUFFLEVBQWE7UUFBeEQsd0JBQUEsRUFBQSxXQUFtQjtRQUFFLHFCQUFBLEVBQUEsVUFBb0I7UUFFM0QsSUFBSSxDQUFDLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQztZQUNuQixjQUFjLENBQUMsT0FBTyxDQUFDO1lBQ3ZCLFNBQVMsQ0FBQyxPQUFPLENBQUM7WUFDbEIsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUU7WUFDMUIsT0FBTyxLQUFLLENBQUM7U0FDaEI7O1lBRUcsS0FBSyxHQUFHLEtBQUs7O1lBQ2IsSUFBSSxHQUFHLElBQUk7UUFDZixPQUFPLElBQUksS0FBSyxHQUFHLEVBQUU7WUFDakIsS0FBSyxJQUFJLElBQUksQ0FBQztZQUNkLElBQUksR0FBRyxtQkFBQSxTQUFTLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksRUFBQyxDQUFDO1NBQ3hDO1FBRUQsSUFBSSxFQUFFLEVBQUU7O2dCQUNFLE1BQU0sR0FBRyxTQUFTLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQzs7Z0JBRTlCLE1BQU0sR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLGVBQWUsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLEVBQUUsT0FBTyxDQUFDO1lBRTNFLE9BQU8sU0FBUyxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLENBQUM7U0FDN0M7UUFFRCxLQUFLLElBQU0sR0FBRyxJQUFJLFNBQVMsQ0FBQyxPQUFPLEVBQUU7O2dCQUMzQixNQUFNLEdBQUcsU0FBUyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUM7WUFDckMsSUFBSSxLQUFLLEdBQUcsTUFBTSxDQUFDLEdBQUcsRUFBRTs7b0JBRWQsTUFBTSxHQUFHLFNBQVMsQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsRUFBRSxPQUFPLENBQUM7Z0JBRTNFLE9BQU8sU0FBUyxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUM7YUFDOUM7U0FDSjtJQUNMLENBQUM7Ozs7OztJQUVNLHNCQUFZOzs7OztJQUFuQixVQUFvQixNQUFjLEVBQUUsSUFBWTtRQUM1QyxPQUFVLE1BQU0sU0FBSSxJQUFNLENBQUM7SUFDL0IsQ0FBQzs7Ozs7O0lBRU0seUJBQWU7Ozs7O0lBQXRCLFVBQXVCLE1BQXdDLEVBQUUsS0FBYTs7WUFDcEUsSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTO1FBQ3JFLE9BQU8sSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO0lBQzNDLENBQUM7SUFwRE0saUJBQU8sR0FBd0Q7UUFDbEUsR0FBRyxFQUFFLEVBQUMsR0FBRyxFQUFFLElBQUksRUFBQztRQUNoQixJQUFJLEVBQUUsRUFBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBQztRQUN6QyxJQUFJLEVBQUUsRUFBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBQzs7UUFDekMsSUFBSSxFQUFFLEVBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUM7UUFDMUMsSUFBSSxFQUFFLEVBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUM7UUFDMUMsSUFBSSxFQUFFLEVBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFDO0tBQ25ELENBQUM7O2dCQVpMLElBQUksU0FBQztvQkFDRixJQUFJLEVBQUUsT0FBTztpQkFDaEI7O0lBd0RELGdCQUFDO0NBQUEsQUExREQsSUEwREM7U0F2RFksU0FBUzs7O0lBRWxCLGtCQU9FIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBpc051bWJlckZpbml0ZSwgaXNQb3NpdGl2ZSwgaXNJbnRlZ2VyLCB0b0RlY2ltYWwgfSBmcm9tICcuLi91dGlscy91dGlscyc7XHJcblxyXG5leHBvcnQgdHlwZSBCeXRlVW5pdCA9ICdCJyB8ICdrQicgfCAnS0InIHwgJ01CJyB8ICdHQicgfCAnVEInO1xyXG5cclxuXHJcbkBQaXBlKHtcclxuICAgIG5hbWU6ICdieXRlcydcclxufSlcclxuZXhwb3J0IGNsYXNzIEJ5dGVzUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xyXG5cclxuICAgIHN0YXRpYyBmb3JtYXRzOiB7IFtrZXk6IHN0cmluZ106IHsgbWF4OiBudW1iZXIsIHByZXY/OiBCeXRlVW5pdCB9IH0gPSB7XHJcbiAgICAgICAgJ0InOiB7bWF4OiAxMDI0fSxcclxuICAgICAgICAna0InOiB7bWF4OiBNYXRoLnBvdygxMDI0LCAyKSwgcHJldjogJ0InfSxcclxuICAgICAgICAnS0InOiB7bWF4OiBNYXRoLnBvdygxMDI0LCAyKSwgcHJldjogJ0InfSwgLy8gQmFja3dhcmQgY29tcGF0aWJsZVxyXG4gICAgICAgICdNQic6IHttYXg6IE1hdGgucG93KDEwMjQsIDMpLCBwcmV2OiAna0InfSxcclxuICAgICAgICAnR0InOiB7bWF4OiBNYXRoLnBvdygxMDI0LCA0KSwgcHJldjogJ01CJ30sXHJcbiAgICAgICAgJ1RCJzoge21heDogTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIsIHByZXY6ICdHQid9XHJcbiAgICB9O1xyXG5cclxuXHJcbiAgICB0cmFuc2Zvcm0oaW5wdXQ6IGFueSwgZGVjaW1hbDogbnVtYmVyID0gMCwgZnJvbTogQnl0ZVVuaXQgPSAnQicsIHRvPzogQnl0ZVVuaXQpOiBhbnkge1xyXG5cclxuICAgICAgICBpZiAoIShpc051bWJlckZpbml0ZShpbnB1dCkgJiZcclxuICAgICAgICAgICAgICAgIGlzTnVtYmVyRmluaXRlKGRlY2ltYWwpICYmXHJcbiAgICAgICAgICAgICAgICBpc0ludGVnZXIoZGVjaW1hbCkgJiZcclxuICAgICAgICAgICAgICAgIGlzUG9zaXRpdmUoZGVjaW1hbCkpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBpbnB1dDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBieXRlcyA9IGlucHV0O1xyXG4gICAgICAgIGxldCB1bml0ID0gZnJvbTtcclxuICAgICAgICB3aGlsZSAodW5pdCAhPT0gJ0InKSB7XHJcbiAgICAgICAgICAgIGJ5dGVzICo9IDEwMjQ7XHJcbiAgICAgICAgICAgIHVuaXQgPSBCeXRlc1BpcGUuZm9ybWF0c1t1bml0XS5wcmV2ITtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0bykge1xyXG4gICAgICAgICAgICBjb25zdCBmb3JtYXQgPSBCeXRlc1BpcGUuZm9ybWF0c1t0b107XHJcblxyXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSB0b0RlY2ltYWwoQnl0ZXNQaXBlLmNhbGN1bGF0ZVJlc3VsdChmb3JtYXQsIGJ5dGVzKSwgZGVjaW1hbCk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gQnl0ZXNQaXBlLmZvcm1hdFJlc3VsdChyZXN1bHQsIHRvKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIEJ5dGVzUGlwZS5mb3JtYXRzKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGZvcm1hdCA9IEJ5dGVzUGlwZS5mb3JtYXRzW2tleV07XHJcbiAgICAgICAgICAgIGlmIChieXRlcyA8IGZvcm1hdC5tYXgpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSB0b0RlY2ltYWwoQnl0ZXNQaXBlLmNhbGN1bGF0ZVJlc3VsdChmb3JtYXQsIGJ5dGVzKSwgZGVjaW1hbCk7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIEJ5dGVzUGlwZS5mb3JtYXRSZXN1bHQocmVzdWx0LCBrZXkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBmb3JtYXRSZXN1bHQocmVzdWx0OiBudW1iZXIsIHVuaXQ6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIGAke3Jlc3VsdH0gJHt1bml0fWA7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGNhbGN1bGF0ZVJlc3VsdChmb3JtYXQ6IHsgbWF4OiBudW1iZXIsIHByZXY/OiBCeXRlVW5pdCB9LCBieXRlczogbnVtYmVyKSB7XHJcbiAgICAgICAgY29uc3QgcHJldiA9IGZvcm1hdC5wcmV2ID8gQnl0ZXNQaXBlLmZvcm1hdHNbZm9ybWF0LnByZXZdIDogdW5kZWZpbmVkO1xyXG4gICAgICAgIHJldHVybiBwcmV2ID8gYnl0ZXMgLyBwcmV2Lm1heCA6IGJ5dGVzO1xyXG4gICAgfVxyXG59Il19