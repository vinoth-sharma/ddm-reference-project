/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Pipe } from '@angular/core';
import { isArray } from '../utils/utils';
export class OrderByPipe {
    /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    static _orderBy(a, b) {
        if (a instanceof Date && b instanceof Date) {
            return (a < b) ? -1 : (a > b) ? 1 : 0;
        }
        /** @type {?} */
        const floatA = parseFloat(a);
        /** @type {?} */
        const floatB = parseFloat(b);
        if (typeof a === 'string' && typeof b === 'string' && (isNaN(floatA) || isNaN(floatB))) {
            /** @type {?} */
            const lowerA = a.toLowerCase();
            /** @type {?} */
            const lowerB = b.toLowerCase();
            return (lowerA < lowerB) ? -1 : (lowerA > lowerB) ? 1 : 0;
        }
        return (floatA < floatB) ? -1 : (floatA > floatB) ? 1 : 0;
    }
    /**
     * @param {?} input
     * @param {?=} config
     * @return {?}
     */
    transform(input, config = '+') {
        if (!isArray(input)) {
            return input;
        }
        /** @type {?} */
        const configIsArray = isArray(config);
        // If config === 'param' OR ['param'] 
        if (!configIsArray || (configIsArray && config.length === 1)) {
            /** @type {?} */
            const propertyToCheck = configIsArray ? config[0] : config;
            /** @type {?} */
            const first = propertyToCheck.substr(0, 1);
            /** @type {?} */
            const desc = (first === '-');
            // Basic array (if only + or - is present)
            if (!propertyToCheck || propertyToCheck === '-' || propertyToCheck === '+') {
                return [...input].sort((a, b) => {
                    /** @type {?} */
                    const comparator = OrderByPipe._orderBy(a, b);
                    return desc ? -comparator : comparator;
                });
            }
            else {
                // If contains + or -, substring the property
                /** @type {?} */
                const property = (first === '+' || desc) ? propertyToCheck.substr(1) : propertyToCheck;
                return [...input].sort((a, b) => {
                    /** @type {?} */
                    const comparator = OrderByPipe._orderBy(a[property], b[property]);
                    return desc ? -comparator : comparator;
                });
            }
        }
        else { // Config is an array of property
            return [...input].sort((a, b) => {
                for (let i = 0; i < config.length; ++i) {
                    /** @type {?} */
                    const first = config[i].substr(0, 1);
                    /** @type {?} */
                    const desc = (first === '-');
                    /** @type {?} */
                    const property = (first === '+' || desc) ? config[i].substr(1) : config[i];
                    /** @type {?} */
                    const comparator = OrderByPipe._orderBy(a[property], b[property]);
                    /** @type {?} */
                    const comparison = desc ? -comparator : comparator;
                    if (comparison !== 0) {
                        return comparison;
                    }
                }
                return 0;
            });
        }
    }
}
OrderByPipe.decorators = [
    { type: Pipe, args: [{
                name: 'orderBy'
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3JkZXItYnkucGlwZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItcGlwZXMvIiwic291cmNlcyI6WyJhcnJheS9vcmRlci1ieS5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUNwRCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFLekMsTUFBTSxPQUFPLFdBQVc7Ozs7OztJQUVkLE1BQU0sQ0FBQyxRQUFRLENBQUUsQ0FBTSxFQUFFLENBQU07UUFFckMsSUFBSSxDQUFDLFlBQVksSUFBSSxJQUFJLENBQUMsWUFBWSxJQUFJLEVBQUU7WUFDMUMsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUN2Qzs7Y0FFSyxNQUFNLEdBQUcsVUFBVSxDQUFDLENBQUMsQ0FBQzs7Y0FDdEIsTUFBTSxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUM7UUFFNUIsSUFBSSxPQUFPLENBQUMsS0FBSyxRQUFRLElBQUksT0FBTyxDQUFDLEtBQUssUUFBUSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFOztrQkFDaEYsTUFBTSxHQUFHLENBQUMsQ0FBQyxXQUFXLEVBQUU7O2tCQUN4QixNQUFNLEdBQUcsQ0FBQyxDQUFDLFdBQVcsRUFBRTtZQUM5QixPQUFPLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FB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QUM7OzBCQUMzRCxVQUFVLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsVUFBVTtvQkFFbEQsSUFBSSxVQUFVLEtBQUssQ0FBQyxFQUFFO3dCQUNwQixPQUFPLFVBQVUsQ0FBQztxQkFDbkI7aUJBQ0Y7Z0JBRUQsT0FBTyxDQUFDLENBQUM7WUFDWCxDQUFDLENBQUMsQ0FBQztTQUVKO0lBQ0gsQ0FBQzs7O1lBOUVGLElBQUksU0FBQztnQkFDSixJQUFJLEVBQUUsU0FBUzthQUNoQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgaXNBcnJheSB9IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcclxuXHJcbkBQaXBlKHtcclxuICBuYW1lOiAnb3JkZXJCeSdcclxufSlcclxuZXhwb3J0IGNsYXNzIE9yZGVyQnlQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcbiAgXHJcbiAgcHJpdmF0ZSBzdGF0aWMgX29yZGVyQnkgKGE6IGFueSwgYjogYW55KTogbnVtYmVyIHtcclxuICAgIFxyXG4gICAgaWYgKGEgaW5zdGFuY2VvZiBEYXRlICYmIGIgaW5zdGFuY2VvZiBEYXRlKSB7XHJcbiAgICAgIHJldHVybiAoYSA8IGIpID8gLTEgOiAoYSA+IGIpID8gMSA6IDA7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGNvbnN0IGZsb2F0QSA9IHBhcnNlRmxvYXQoYSk7XHJcbiAgICBjb25zdCBmbG9hdEIgPSBwYXJzZUZsb2F0KGIpO1xyXG4gICAgXHJcbiAgICBpZiAodHlwZW9mIGEgPT09ICdzdHJpbmcnICYmIHR5cGVvZiBiID09PSAnc3RyaW5nJyAmJiAoaXNOYU4oZmxvYXRBKSB8fCBpc05hTihmbG9hdEIpKSkge1xyXG4gICAgICBjb25zdCBsb3dlckEgPSBhLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgIGNvbnN0IGxvd2VyQiA9IGIudG9Mb3dlckNhc2UoKTtcclxuICAgICAgcmV0dXJuIChsb3dlckEgPCBsb3dlckIpID8gLTEgOiAobG93ZXJBID4gbG93ZXJCKSA/IDEgOiAwO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICByZXR1cm4gKGZsb2F0QSA8IGZsb2F0QikgPyAtMSA6IChmbG9hdEEgPiBmbG9hdEIpID8gMSA6IDA7IFxyXG4gIH1cclxuICBcclxuICB0cmFuc2Zvcm0gKGlucHV0OiBhbnksIGNvbmZpZzogYW55ID0gJysnKTogYW55IHtcclxuICAgIFxyXG4gICAgaWYgKCFpc0FycmF5KGlucHV0KSkge1xyXG4gICAgICByZXR1cm4gaW5wdXQ7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGNvbnN0IGNvbmZpZ0lzQXJyYXkgPSBpc0FycmF5KGNvbmZpZyk7XHJcbiAgICBcclxuICAgIC8vIElmIGNvbmZpZyA9PT0gJ3BhcmFtJyBPUiBbJ3BhcmFtJ10gXHJcbiAgICBpZiAoIWNvbmZpZ0lzQXJyYXkgfHwgKGNvbmZpZ0lzQXJyYXkgJiYgY29uZmlnLmxlbmd0aCA9PT0gMSkpIHtcclxuICAgICAgXHJcbiAgICAgIGNvbnN0IHByb3BlcnR5VG9DaGVjazogc3RyaW5nID0gY29uZmlnSXNBcnJheSA/IGNvbmZpZ1swXSA6IGNvbmZpZztcclxuICAgICAgY29uc3QgZmlyc3QgPSBwcm9wZXJ0eVRvQ2hlY2suc3Vic3RyKDAsIDEpO1xyXG4gICAgICBjb25zdCBkZXNjID0gKGZpcnN0ID09PSAnLScpOyAvLyBGaXJzdCBjaGFyYWN0ZXIgaXMgJy0nXHJcbiAgICAgIFxyXG4gICAgICAvLyBCYXNpYyBhcnJheSAoaWYgb25seSArIG9yIC0gaXMgcHJlc2VudClcclxuICAgICAgaWYgKCFwcm9wZXJ0eVRvQ2hlY2sgfHwgcHJvcGVydHlUb0NoZWNrID09PSAnLScgfHwgcHJvcGVydHlUb0NoZWNrID09PSAnKycpIHtcclxuICAgICAgICByZXR1cm4gWy4uLmlucHV0XS5zb3J0KChhOiBhbnksIGI6IGFueSkgPT4ge1xyXG4gICAgICAgICAgY29uc3QgY29tcGFyYXRvciA9IE9yZGVyQnlQaXBlLl9vcmRlckJ5KGEsIGIpO1xyXG4gICAgICAgICAgcmV0dXJuIGRlc2MgPyAtY29tcGFyYXRvciA6IGNvbXBhcmF0b3I7IFxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9ICAgICAgICAgICAgXHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIC8vIElmIGNvbnRhaW5zICsgb3IgLSwgc3Vic3RyaW5nIHRoZSBwcm9wZXJ0eVxyXG4gICAgICAgIGNvbnN0IHByb3BlcnR5ID0gKGZpcnN0ID09PSAnKycgfHwgZGVzYykgPyBwcm9wZXJ0eVRvQ2hlY2suc3Vic3RyKDEpIDogcHJvcGVydHlUb0NoZWNrO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHJldHVybiBbLi4uaW5wdXRdLnNvcnQoKGE6IGFueSwgYjogYW55KSA9PiB7XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIGNvbnN0IGNvbXBhcmF0b3IgPSBPcmRlckJ5UGlwZS5fb3JkZXJCeShhW3Byb3BlcnR5XSwgYltwcm9wZXJ0eV0pO1xyXG4gICAgICAgICAgcmV0dXJuIGRlc2MgPyAtY29tcGFyYXRvciA6IGNvbXBhcmF0b3I7IFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIFxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHsgLy8gQ29uZmlnIGlzIGFuIGFycmF5IG9mIHByb3BlcnR5XHJcbiAgICAgIFxyXG4gICAgICByZXR1cm4gWy4uLmlucHV0XS5zb3J0KChhOiBhbnksIGI6IGFueSkgPT4ge1xyXG4gICAgICAgIFxyXG4gICAgICAgIGZvciAobGV0IGk6IG51bWJlciA9IDA7IGkgPCBjb25maWcubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgIGNvbnN0IGZpcnN0ID0gY29uZmlnW2ldLnN1YnN0cigwLCAxKTtcclxuICAgICAgICAgIGNvbnN0IGRlc2MgPSAoZmlyc3QgPT09ICctJyk7XHJcbiAgICAgICAgICBjb25zdCBwcm9wZXJ0eSA9IChmaXJzdCA9PT0gJysnIHx8IGRlc2MpID8gY29uZmlnW2ldLnN1YnN0cigxKSA6IGNvbmZpZ1tpXTtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgY29uc3QgY29tcGFyYXRvciA9IE9yZGVyQnlQaXBlLl9vcmRlckJ5KGFbcHJvcGVydHldLCBiW3Byb3BlcnR5XSk7XHJcbiAgICAgICAgICBjb25zdCBjb21wYXJpc29uID0gZGVzYyA/IC1jb21wYXJhdG9yIDogY29tcGFyYXRvcjtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgaWYgKGNvbXBhcmlzb24gIT09IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNvbXBhcmlzb247XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHJldHVybiAwO1xyXG4gICAgICB9KTtcclxuICAgICAgXHJcbiAgICB9XHJcbiAgfVxyXG59Il19