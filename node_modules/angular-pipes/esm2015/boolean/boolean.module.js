/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { NgModule } from '@angular/core';
import { IsGreaterPipe, IsGreaterOrEqualPipe, IsLessPipe, IsLessOrEqualPipe, IsEqualPipe, IsNotEqualPipe, IsIdenticalPipe, IsNotIdenticalPipe, } from './conditions.pipe';
import { IsNullPipe, IsNilPipe, IsUndefinedPipe, IsFunctionPipe, IsNumberPipe, IsStringPipe, IsArrayPipe, IsObjectPipe, IsDefinedPipe } from './types.pipe';
export class NgBooleanPipesModule {
}
NgBooleanPipesModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    IsGreaterPipe,
                    IsGreaterOrEqualPipe,
                    IsLessPipe,
                    IsLessOrEqualPipe,
                    IsEqualPipe,
                    IsNotEqualPipe,
                    IsIdenticalPipe,
                    IsNotIdenticalPipe,
                    IsNilPipe,
                    IsNullPipe,
                    IsUndefinedPipe,
                    IsFunctionPipe,
                    IsNumberPipe,
                    IsStringPipe,
                    IsArrayPipe,
                    IsObjectPipe,
                    IsDefinedPipe
                ],
                exports: [
                    IsGreaterPipe,
                    IsGreaterOrEqualPipe,
                    IsLessPipe,
                    IsLessOrEqualPipe,
                    IsEqualPipe,
                    IsNotEqualPipe,
                    IsIdenticalPipe,
                    IsNotIdenticalPipe,
                    IsNilPipe,
                    IsNullPipe,
                    IsUndefinedPipe,
                    IsFunctionPipe,
                    IsNumberPipe,
                    IsStringPipe,
                    IsArrayPipe,
                    IsObjectPipe,
                    IsDefinedPipe
                ]
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm9vbGVhbi5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyLXBpcGVzLyIsInNvdXJjZXMiOlsiYm9vbGVhbi9ib29sZWFuLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV6QyxPQUFPLEVBQ0gsYUFBYSxFQUNiLG9CQUFvQixFQUNwQixVQUFVLEVBQ1YsaUJBQWlCLEVBQ2pCLFdBQVcsRUFDWCxjQUFjLEVBQ2QsZUFBZSxFQUNmLGtCQUFrQixHQUNyQixNQUFNLG1CQUFtQixDQUFDO0FBRTNCLE9BQU8sRUFDSCxVQUFVLEVBQ1YsU0FBUyxFQUNULGVBQWUsRUFDZixjQUFjLEVBQ2QsWUFBWSxFQUNaLFlBQVksRUFDWixXQUFXLEVBQ1gsWUFBWSxFQUNaLGFBQWEsRUFDaEIsTUFBTSxjQUFjLENBQUM7QUEwQ3RCLE1BQU0sT0FBTyxvQkFBb0I7OztZQXhDaEMsUUFBUSxTQUFDO2dCQUNOLFlBQVksRUFBRTtvQkFDVixhQUFhO29CQUNiLG9CQUFvQjtvQkFDcEIsVUFBVTtvQkFDVixpQkFBaUI7b0JBQ2pCLFdBQVc7b0JBQ1gsY0FBYztvQkFDZCxlQUFlO29CQUNmLGtCQUFrQjtvQkFDbEIsU0FBUztvQkFDVCxVQUFVO29CQUNWLGVBQWU7b0JBQ2YsY0FBYztvQkFDZCxZQUFZO29CQUNaLFlBQVk7b0JBQ1osV0FBVztvQkFDWCxZQUFZO29CQUNaLGFBQWE7aUJBQ2hCO2dCQUNELE9BQU8sRUFBRTtvQkFDTCxhQUFhO29CQUNiLG9CQUFvQjtvQkFDcEIsVUFBVTtvQkFDVixpQkFBaUI7b0JBQ2pCLFdBQVc7b0JBQ1gsY0FBYztvQkFDZCxlQUFlO29CQUNmLGtCQUFrQjtvQkFDbEIsU0FBUztvQkFDVCxVQUFVO29CQUNWLGVBQWU7b0JBQ2YsY0FBYztvQkFDZCxZQUFZO29CQUNaLFlBQVk7b0JBQ1osV0FBVztvQkFDWCxZQUFZO29CQUNaLGFBQWE7aUJBQ2hCO2FBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuaW1wb3J0IHtcclxuICAgIElzR3JlYXRlclBpcGUsXHJcbiAgICBJc0dyZWF0ZXJPckVxdWFsUGlwZSxcclxuICAgIElzTGVzc1BpcGUsXHJcbiAgICBJc0xlc3NPckVxdWFsUGlwZSxcclxuICAgIElzRXF1YWxQaXBlLFxyXG4gICAgSXNOb3RFcXVhbFBpcGUsXHJcbiAgICBJc0lkZW50aWNhbFBpcGUsXHJcbiAgICBJc05vdElkZW50aWNhbFBpcGUsXHJcbn0gZnJvbSAnLi9jb25kaXRpb25zLnBpcGUnO1xyXG5cclxuaW1wb3J0IHtcclxuICAgIElzTnVsbFBpcGUsXHJcbiAgICBJc05pbFBpcGUsXHJcbiAgICBJc1VuZGVmaW5lZFBpcGUsXHJcbiAgICBJc0Z1bmN0aW9uUGlwZSxcclxuICAgIElzTnVtYmVyUGlwZSxcclxuICAgIElzU3RyaW5nUGlwZSxcclxuICAgIElzQXJyYXlQaXBlLFxyXG4gICAgSXNPYmplY3RQaXBlLFxyXG4gICAgSXNEZWZpbmVkUGlwZVxyXG59IGZyb20gJy4vdHlwZXMucGlwZSc7XHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gICAgZGVjbGFyYXRpb25zOiBbXHJcbiAgICAgICAgSXNHcmVhdGVyUGlwZSxcclxuICAgICAgICBJc0dyZWF0ZXJPckVxdWFsUGlwZSxcclxuICAgICAgICBJc0xlc3NQaXBlLFxyXG4gICAgICAgIElzTGVzc09yRXF1YWxQaXBlLFxyXG4gICAgICAgIElzRXF1YWxQaXBlLFxyXG4gICAgICAgIElzTm90RXF1YWxQaXBlLFxyXG4gICAgICAgIElzSWRlbnRpY2FsUGlwZSxcclxuICAgICAgICBJc05vdElkZW50aWNhbFBpcGUsXHJcbiAgICAgICAgSXNOaWxQaXBlLFxyXG4gICAgICAgIElzTnVsbFBpcGUsXHJcbiAgICAgICAgSXNVbmRlZmluZWRQaXBlLFxyXG4gICAgICAgIElzRnVuY3Rpb25QaXBlLFxyXG4gICAgICAgIElzTnVtYmVyUGlwZSxcclxuICAgICAgICBJc1N0cmluZ1BpcGUsXHJcbiAgICAgICAgSXNBcnJheVBpcGUsXHJcbiAgICAgICAgSXNPYmplY3RQaXBlLFxyXG4gICAgICAgIElzRGVmaW5lZFBpcGVcclxuICAgIF0sXHJcbiAgICBleHBvcnRzOiBbXHJcbiAgICAgICAgSXNHcmVhdGVyUGlwZSxcclxuICAgICAgICBJc0dyZWF0ZXJPckVxdWFsUGlwZSxcclxuICAgICAgICBJc0xlc3NQaXBlLFxyXG4gICAgICAgIElzTGVzc09yRXF1YWxQaXBlLFxyXG4gICAgICAgIElzRXF1YWxQaXBlLFxyXG4gICAgICAgIElzTm90RXF1YWxQaXBlLFxyXG4gICAgICAgIElzSWRlbnRpY2FsUGlwZSxcclxuICAgICAgICBJc05vdElkZW50aWNhbFBpcGUsXHJcbiAgICAgICAgSXNOaWxQaXBlLFxyXG4gICAgICAgIElzTnVsbFBpcGUsXHJcbiAgICAgICAgSXNVbmRlZmluZWRQaXBlLFxyXG4gICAgICAgIElzRnVuY3Rpb25QaXBlLFxyXG4gICAgICAgIElzTnVtYmVyUGlwZSxcclxuICAgICAgICBJc1N0cmluZ1BpcGUsXHJcbiAgICAgICAgSXNBcnJheVBpcGUsXHJcbiAgICAgICAgSXNPYmplY3RQaXBlLFxyXG4gICAgICAgIElzRGVmaW5lZFBpcGVcclxuICAgIF1cclxufSlcclxuZXhwb3J0IGNsYXNzIE5nQm9vbGVhblBpcGVzTW9kdWxlIHt9XHJcblxyXG4iXX0=