/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
// Inspired from https://github.com/a8m/angular-filter/blob/master/src/_filter/string/truncate.js
import { Pipe } from '@angular/core';
import { isString, isUndefined } from '../utils/utils';
var TruncatePipe = /** @class */ (function () {
    function TruncatePipe() {
    }
    /**
     * @param {?} input
     * @param {?=} length
     * @param {?=} suffix
     * @param {?=} preserve
     * @return {?}
     */
    TruncatePipe.prototype.transform = /**
     * @param {?} input
     * @param {?=} length
     * @param {?=} suffix
     * @param {?=} preserve
     * @return {?}
     */
    function (input, length, suffix, preserve) {
        if (!isString(input)) {
            return input;
        }
        length = isUndefined(length) ? input.length : length;
        if (input.length <= length) {
            return input;
        }
        preserve = preserve || false;
        suffix = suffix || '';
        /** @type {?} */
        var index = length;
        if (preserve) {
            if (input.indexOf(' ', length) === -1) {
                index = input.length;
            }
            else {
                index = input.indexOf(' ', length);
            }
        }
        return input.substring(0, index) + suffix;
    };
    TruncatePipe.decorators = [
        { type: Pipe, args: [{
                    name: 'truncate'
                },] }
    ];
    return TruncatePipe;
}());
export { TruncatePipe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJ1bmNhdGUucGlwZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItcGlwZXMvIiwic291cmNlcyI6WyJzdHJpbmcvdHJ1bmNhdGUucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUVBLE9BQU8sRUFBRSxJQUFJLEVBQWtCLE1BQU0sZUFBZSxDQUFDO0FBQ3JELE9BQU8sRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFdkQ7SUFBQTtJQWlDQSxDQUFDOzs7Ozs7OztJQTVCQyxnQ0FBUzs7Ozs7OztJQUFULFVBQVcsS0FBVSxFQUFFLE1BQWUsRUFBRSxNQUFlLEVBQUUsUUFBa0I7UUFHekUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUNwQixPQUFPLEtBQUssQ0FBQztTQUNkO1FBRUQsTUFBTSxHQUFHLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO1FBRXJELElBQUksS0FBSyxDQUFDLE1BQU0sSUFBSSxNQUFNLEVBQUU7WUFDMUIsT0FBTyxLQUFLLENBQUM7U0FDZDtRQUVELFFBQVEsR0FBRyxRQUFRLElBQUksS0FBSyxDQUFDO1FBQzdCLE1BQU0sR0FBRyxNQUFNLElBQUksRUFBRSxDQUFDOztZQUNsQixLQUFLLEdBQUcsTUFBTTtRQUVsQixJQUFJLFFBQVEsRUFBRTtZQUNaLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUU7Z0JBQ3JDLEtBQUssR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDO2FBQ3RCO2lCQUNJO2dCQUNILEtBQUssR0FBSSxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQzthQUNyQztTQUNGO1FBRUQsT0FBTyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsR0FBRyxNQUFNLENBQUM7SUFDNUMsQ0FBQzs7Z0JBaENGLElBQUksU0FBQztvQkFDSixJQUFJLEVBQUUsVUFBVTtpQkFDakI7O0lBK0JELG1CQUFDO0NBQUEsQUFqQ0QsSUFpQ0M7U0E5QlksWUFBWSIsInNvdXJjZXNDb250ZW50IjpbIi8vIEluc3BpcmVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2E4bS9hbmd1bGFyLWZpbHRlci9ibG9iL21hc3Rlci9zcmMvX2ZpbHRlci9zdHJpbmcvdHJ1bmNhdGUuanNcclxuXHJcbmltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IGlzU3RyaW5nLCBpc1VuZGVmaW5lZCB9IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcclxuXHJcbkBQaXBlKHtcclxuICBuYW1lOiAndHJ1bmNhdGUnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBUcnVuY2F0ZVBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuICBcclxuICB0cmFuc2Zvcm0gKGlucHV0OiBhbnksIGxlbmd0aD86IG51bWJlciwgc3VmZml4Pzogc3RyaW5nLCBwcmVzZXJ2ZT86IGJvb2xlYW4pOiBhbnkge1xyXG4gICAgXHJcbiAgICBcclxuICAgIGlmICghaXNTdHJpbmcoaW5wdXQpKSB7XHJcbiAgICAgIHJldHVybiBpbnB1dDtcclxuICAgIH1cclxuICAgIFxyXG4gICAgbGVuZ3RoID0gaXNVbmRlZmluZWQobGVuZ3RoKSA/IGlucHV0Lmxlbmd0aCA6IGxlbmd0aDtcclxuICAgIFxyXG4gICAgaWYgKGlucHV0Lmxlbmd0aCA8PSBsZW5ndGgpIHtcclxuICAgICAgcmV0dXJuIGlucHV0O1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBwcmVzZXJ2ZSA9IHByZXNlcnZlIHx8IGZhbHNlO1xyXG4gICAgc3VmZml4ID0gc3VmZml4IHx8ICcnO1xyXG4gICAgbGV0IGluZGV4ID0gbGVuZ3RoO1xyXG4gICAgXHJcbiAgICBpZiAocHJlc2VydmUpIHtcclxuICAgICAgaWYgKGlucHV0LmluZGV4T2YoJyAnLCBsZW5ndGgpID09PSAtMSkge1xyXG4gICAgICAgIGluZGV4ID0gaW5wdXQubGVuZ3RoO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIGluZGV4ICA9IGlucHV0LmluZGV4T2YoJyAnLCBsZW5ndGgpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHJldHVybiBpbnB1dC5zdWJzdHJpbmcoMCwgaW5kZXgpICsgc3VmZml4O1xyXG4gIH1cclxufSJdfQ==