/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { NgModule } from '@angular/core';
import { LeftPadPipe } from './left-pad.pipe';
import { MatchPipe } from './match.pipe';
import { PadPipe } from './pad.pipe';
import { ReplacePipe } from './replace.pipe';
import { RightPadPipe } from './right-pad.pipe';
import { SplitPipe } from './split.pipe';
import { TestPipe } from './test.pipe';
import { TrimPipe } from './trim.pipe';
import { NewlinesPipe } from './newlines.pipe';
import { CapitalizePipe } from './capitalize.pipe';
import { UpperFirstPipe } from './upperfirst.pipe';
import { TemplatePipe } from './template.pipe';
import { EncodeURIPipe } from './encode-uri.pipe';
import { EncodeURIComponentPipe } from './encode-uri-component.pipe';
import { DecodeURIPipe } from './decode-uri.pipe';
import { DecodeURIComponentPipe } from './decode-uri-component.pipe';
import { TruncatePipe } from './truncate.pipe';
import { RepeatPipe } from './repeat.pipe';
import { SlugifyPipe } from './slugify.pipe';
import { StripTagsPipe } from "./strip-tags.pipe";
import { LatinizePipe } from "./latinize.pipe";
import { WrapPipe } from "./wrap.pipe";
import { WithPipe } from "./with.pipe";
import { ReverseStrPipe } from "./reverse-str.pipe";
export class NgStringPipesModule {
}
NgStringPipesModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    LeftPadPipe,
                    MatchPipe,
                    PadPipe,
                    ReplacePipe,
                    RightPadPipe,
                    SplitPipe,
                    TestPipe,
                    TrimPipe,
                    NewlinesPipe,
                    CapitalizePipe,
                    UpperFirstPipe,
                    TemplatePipe,
                    EncodeURIPipe,
                    EncodeURIComponentPipe,
                    DecodeURIPipe,
                    DecodeURIComponentPipe,
                    TruncatePipe,
                    RepeatPipe,
                    SlugifyPipe,
                    StripTagsPipe,
                    LatinizePipe,
                    WrapPipe,
                    WithPipe,
                    ReverseStrPipe
                ],
                exports: [
                    LeftPadPipe,
                    MatchPipe,
                    PadPipe,
                    ReplacePipe,
                    RightPadPipe,
                    SplitPipe,
                    TestPipe,
                    TrimPipe,
                    NewlinesPipe,
                    CapitalizePipe,
                    UpperFirstPipe,
                    TemplatePipe,
                    EncodeURIPipe,
                    EncodeURIComponentPipe,
                    DecodeURIPipe,
                    DecodeURIComponentPipe,
                    TruncatePipe,
                    RepeatPipe,
                    SlugifyPipe,
                    StripTagsPipe,
                    LatinizePipe,
                    WrapPipe,
                    WithPipe,
                    ReverseStrPipe
                ]
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyaW5nLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItcGlwZXMvIiwic291cmNlcyI6WyJzdHJpbmcvc3RyaW5nLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFFBQVEsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUV2QyxPQUFPLEVBQUMsV0FBVyxFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFDNUMsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLGNBQWMsQ0FBQztBQUN2QyxPQUFPLEVBQUMsT0FBTyxFQUFDLE1BQU0sWUFBWSxDQUFDO0FBQ25DLE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUMzQyxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0sa0JBQWtCLENBQUM7QUFDOUMsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLGNBQWMsQ0FBQztBQUN2QyxPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0sYUFBYSxDQUFDO0FBQ3JDLE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxhQUFhLENBQUM7QUFDckMsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBQzdDLE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQztBQUNqRCxPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0sbUJBQW1CLENBQUM7QUFDakQsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBQzdDLE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQztBQUNoRCxPQUFPLEVBQUMsc0JBQXNCLEVBQUMsTUFBTSw2QkFBNkIsQ0FBQztBQUNuRSxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sbUJBQW1CLENBQUM7QUFDaEQsT0FBTyxFQUFDLHNCQUFzQixFQUFDLE1BQU0sNkJBQTZCLENBQUM7QUFDbkUsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBQzdDLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFDLFdBQVcsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQzNDLE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQztBQUNoRCxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFDN0MsT0FBTyxFQUFDLFFBQVEsRUFBQyxNQUFNLGFBQWEsQ0FBQztBQUNyQyxPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0sYUFBYSxDQUFDO0FBQ3JDLE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSxvQkFBb0IsQ0FBQztBQXlEbEQsTUFBTSxPQUFPLG1CQUFtQjs7O1lBdEQvQixRQUFRLFNBQUM7Z0JBQ1IsWUFBWSxFQUFFO29CQUNaLFdBQVc7b0JBQ1gsU0FBUztvQkFDVCxPQUFPO29CQUNQLFdBQVc7b0JBQ1gsWUFBWTtvQkFDWixTQUFTO29CQUNULFFBQVE7b0JBQ1IsUUFBUTtvQkFDUixZQUFZO29CQUNaLGNBQWM7b0JBQ2QsY0FBYztvQkFDZCxZQUFZO29CQUNaLGFBQWE7b0JBQ2Isc0JBQXNCO29CQUN0QixhQUFhO29CQUNiLHNCQUFzQjtvQkFDdEIsWUFBWTtvQkFDWixVQUFVO29CQUNWLFdBQVc7b0JBQ1gsYUFBYTtvQkFDYixZQUFZO29CQUNaLFFBQVE7b0JBQ1IsUUFBUTtvQkFDUixjQUFjO2lCQUNmO2dCQUNELE9BQU8sRUFBRTtvQkFDUCxXQUFXO29CQUNYLFNBQVM7b0JBQ1QsT0FBTztvQkFDUCxXQUFXO29CQUNYLFlBQVk7b0JBQ1osU0FBUztvQkFDVCxRQUFRO29CQUNSLFFBQVE7b0JBQ1IsWUFBWTtvQkFDWixjQUFjO29CQUNkLGNBQWM7b0JBQ2QsWUFBWTtvQkFDWixhQUFhO29CQUNiLHNCQUFzQjtvQkFDdEIsYUFBYTtvQkFDYixzQkFBc0I7b0JBQ3RCLFlBQVk7b0JBQ1osVUFBVTtvQkFDVixXQUFXO29CQUNYLGFBQWE7b0JBQ2IsWUFBWTtvQkFDWixRQUFRO29CQUNSLFFBQVE7b0JBQ1IsY0FBYztpQkFDZjthQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtOZ01vZHVsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5pbXBvcnQge0xlZnRQYWRQaXBlfSBmcm9tICcuL2xlZnQtcGFkLnBpcGUnO1xyXG5pbXBvcnQge01hdGNoUGlwZX0gZnJvbSAnLi9tYXRjaC5waXBlJztcclxuaW1wb3J0IHtQYWRQaXBlfSBmcm9tICcuL3BhZC5waXBlJztcclxuaW1wb3J0IHtSZXBsYWNlUGlwZX0gZnJvbSAnLi9yZXBsYWNlLnBpcGUnO1xyXG5pbXBvcnQge1JpZ2h0UGFkUGlwZX0gZnJvbSAnLi9yaWdodC1wYWQucGlwZSc7XHJcbmltcG9ydCB7U3BsaXRQaXBlfSBmcm9tICcuL3NwbGl0LnBpcGUnO1xyXG5pbXBvcnQge1Rlc3RQaXBlfSBmcm9tICcuL3Rlc3QucGlwZSc7XHJcbmltcG9ydCB7VHJpbVBpcGV9IGZyb20gJy4vdHJpbS5waXBlJztcclxuaW1wb3J0IHtOZXdsaW5lc1BpcGV9IGZyb20gJy4vbmV3bGluZXMucGlwZSc7XHJcbmltcG9ydCB7Q2FwaXRhbGl6ZVBpcGV9IGZyb20gJy4vY2FwaXRhbGl6ZS5waXBlJztcclxuaW1wb3J0IHtVcHBlckZpcnN0UGlwZX0gZnJvbSAnLi91cHBlcmZpcnN0LnBpcGUnO1xyXG5pbXBvcnQge1RlbXBsYXRlUGlwZX0gZnJvbSAnLi90ZW1wbGF0ZS5waXBlJztcclxuaW1wb3J0IHtFbmNvZGVVUklQaXBlfSBmcm9tICcuL2VuY29kZS11cmkucGlwZSc7XHJcbmltcG9ydCB7RW5jb2RlVVJJQ29tcG9uZW50UGlwZX0gZnJvbSAnLi9lbmNvZGUtdXJpLWNvbXBvbmVudC5waXBlJztcclxuaW1wb3J0IHtEZWNvZGVVUklQaXBlfSBmcm9tICcuL2RlY29kZS11cmkucGlwZSc7XHJcbmltcG9ydCB7RGVjb2RlVVJJQ29tcG9uZW50UGlwZX0gZnJvbSAnLi9kZWNvZGUtdXJpLWNvbXBvbmVudC5waXBlJztcclxuaW1wb3J0IHtUcnVuY2F0ZVBpcGV9IGZyb20gJy4vdHJ1bmNhdGUucGlwZSc7XHJcbmltcG9ydCB7UmVwZWF0UGlwZX0gZnJvbSAnLi9yZXBlYXQucGlwZSc7XHJcbmltcG9ydCB7U2x1Z2lmeVBpcGV9IGZyb20gJy4vc2x1Z2lmeS5waXBlJztcclxuaW1wb3J0IHtTdHJpcFRhZ3NQaXBlfSBmcm9tIFwiLi9zdHJpcC10YWdzLnBpcGVcIjtcclxuaW1wb3J0IHtMYXRpbml6ZVBpcGV9IGZyb20gXCIuL2xhdGluaXplLnBpcGVcIjtcclxuaW1wb3J0IHtXcmFwUGlwZX0gZnJvbSBcIi4vd3JhcC5waXBlXCI7XHJcbmltcG9ydCB7V2l0aFBpcGV9IGZyb20gXCIuL3dpdGgucGlwZVwiO1xyXG5pbXBvcnQge1JldmVyc2VTdHJQaXBlfSBmcm9tIFwiLi9yZXZlcnNlLXN0ci5waXBlXCI7XHJcblxyXG5cclxuQE5nTW9kdWxlKHtcclxuICBkZWNsYXJhdGlvbnM6IFtcclxuICAgIExlZnRQYWRQaXBlLFxyXG4gICAgTWF0Y2hQaXBlLFxyXG4gICAgUGFkUGlwZSxcclxuICAgIFJlcGxhY2VQaXBlLFxyXG4gICAgUmlnaHRQYWRQaXBlLFxyXG4gICAgU3BsaXRQaXBlLFxyXG4gICAgVGVzdFBpcGUsXHJcbiAgICBUcmltUGlwZSxcclxuICAgIE5ld2xpbmVzUGlwZSxcclxuICAgIENhcGl0YWxpemVQaXBlLFxyXG4gICAgVXBwZXJGaXJzdFBpcGUsXHJcbiAgICBUZW1wbGF0ZVBpcGUsXHJcbiAgICBFbmNvZGVVUklQaXBlLFxyXG4gICAgRW5jb2RlVVJJQ29tcG9uZW50UGlwZSxcclxuICAgIERlY29kZVVSSVBpcGUsXHJcbiAgICBEZWNvZGVVUklDb21wb25lbnRQaXBlLFxyXG4gICAgVHJ1bmNhdGVQaXBlLFxyXG4gICAgUmVwZWF0UGlwZSxcclxuICAgIFNsdWdpZnlQaXBlLFxyXG4gICAgU3RyaXBUYWdzUGlwZSxcclxuICAgIExhdGluaXplUGlwZSxcclxuICAgIFdyYXBQaXBlLFxyXG4gICAgV2l0aFBpcGUsXHJcbiAgICBSZXZlcnNlU3RyUGlwZVxyXG4gIF0sXHJcbiAgZXhwb3J0czogW1xyXG4gICAgTGVmdFBhZFBpcGUsXHJcbiAgICBNYXRjaFBpcGUsXHJcbiAgICBQYWRQaXBlLFxyXG4gICAgUmVwbGFjZVBpcGUsXHJcbiAgICBSaWdodFBhZFBpcGUsXHJcbiAgICBTcGxpdFBpcGUsXHJcbiAgICBUZXN0UGlwZSxcclxuICAgIFRyaW1QaXBlLFxyXG4gICAgTmV3bGluZXNQaXBlLFxyXG4gICAgQ2FwaXRhbGl6ZVBpcGUsXHJcbiAgICBVcHBlckZpcnN0UGlwZSxcclxuICAgIFRlbXBsYXRlUGlwZSxcclxuICAgIEVuY29kZVVSSVBpcGUsXHJcbiAgICBFbmNvZGVVUklDb21wb25lbnRQaXBlLFxyXG4gICAgRGVjb2RlVVJJUGlwZSxcclxuICAgIERlY29kZVVSSUNvbXBvbmVudFBpcGUsXHJcbiAgICBUcnVuY2F0ZVBpcGUsXHJcbiAgICBSZXBlYXRQaXBlLFxyXG4gICAgU2x1Z2lmeVBpcGUsXHJcbiAgICBTdHJpcFRhZ3NQaXBlLFxyXG4gICAgTGF0aW5pemVQaXBlLFxyXG4gICAgV3JhcFBpcGUsXHJcbiAgICBXaXRoUGlwZSxcclxuICAgIFJldmVyc2VTdHJQaXBlXHJcbiAgXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgTmdTdHJpbmdQaXBlc01vZHVsZSB7XHJcbn1cclxuIl19