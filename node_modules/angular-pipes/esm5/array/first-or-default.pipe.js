/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Pipe } from '@angular/core';
import { isArray, isFunction, getProperty } from '../utils/utils';
var FirstOrDefaultPipe = /** @class */ (function () {
    function FirstOrDefaultPipe() {
    }
    /**
     * @param {?} input
     * @param {?} predicate
     * @param {?=} defaultValue
     * @return {?}
     */
    FirstOrDefaultPipe.find = /**
     * @param {?} input
     * @param {?} predicate
     * @param {?=} defaultValue
     * @return {?}
     */
    function (input, predicate, defaultValue) {
        /** @type {?} */
        var found = false;
        /** @type {?} */
        var result;
        /** @type {?} */
        var i = -1;
        while (!found && ++i < input.length) {
            found = predicate(input[i], i, input);
        }
        if (found) {
            result = input[i];
        }
        if (typeof result === 'undefined' && typeof defaultValue !== 'undefined') {
            result = defaultValue;
        }
        return result;
    };
    /**
     * @param {?} input
     * @param {?} predicate
     * @param {?=} defaultValue
     * @return {?}
     */
    FirstOrDefaultPipe.prototype.transform = /**
     * @param {?} input
     * @param {?} predicate
     * @param {?=} defaultValue
     * @return {?}
     */
    function (input, predicate, defaultValue) {
        if (!isArray(input)) {
            return input;
        }
        if (isFunction(predicate)) {
            return FirstOrDefaultPipe.find(input, (/** @type {?} */ (predicate)), defaultValue);
        }
        else if (isArray(predicate)) {
            var _a = tslib_1.__read((/** @type {?} */ (predicate)), 2), key_1 = _a[0], value_1 = _a[1];
            return FirstOrDefaultPipe.find(input, function (item) { return getProperty(item, key_1) === value_1; }, defaultValue);
        }
        else if (predicate) {
            return FirstOrDefaultPipe.find(input, function (item) { return item === (/** @type {?} */ (predicate)); }, defaultValue);
        }
        else {
            return input;
        }
    };
    FirstOrDefaultPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'firstOrDefault'
                },] }
    ];
    return FirstOrDefaultPipe;
}());
export { FirstOrDefaultPipe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlyc3Qtb3ItZGVmYXVsdC5waXBlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1waXBlcy8iLCJzb3VyY2VzIjpbImFycmF5L2ZpcnN0LW9yLWRlZmF1bHQucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQWtCLE1BQU0sZUFBZSxDQUFDO0FBQ3JELE9BQU8sRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBdUIsTUFBTSxnQkFBZ0IsQ0FBQztBQUd2RjtJQUFBO0lBc0RBLENBQUM7Ozs7Ozs7SUFqRGdCLHVCQUFJOzs7Ozs7SUFBbkIsVUFDRSxLQUFZLEVBQ1osU0FBOEIsRUFDOUIsWUFBa0I7O1lBR2QsS0FBSyxHQUFHLEtBQUs7O1lBQ2IsTUFBVzs7WUFDWCxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRVYsT0FBTyxDQUFDLEtBQUssSUFBSSxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxFQUFFO1lBQ25DLEtBQUssR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztTQUN2QztRQUVELElBQUksS0FBSyxFQUFFO1lBQ1QsTUFBTSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNuQjtRQUVELElBQUksT0FBTyxNQUFNLEtBQUssV0FBVyxJQUFJLE9BQU8sWUFBWSxLQUFLLFdBQVcsRUFBRTtZQUN4RSxNQUFNLEdBQUcsWUFBWSxDQUFDO1NBQ3ZCO1FBRUQsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQzs7Ozs7OztJQUVELHNDQUFTOzs7Ozs7SUFBVCxVQUNFLEtBQVUsRUFDVixTQUEyQyxFQUMzQyxZQUFrQjtRQUdsQixJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ25CLE9BQU8sS0FBSyxDQUFBO1NBQ2I7UUFFRCxJQUFJLFVBQVUsQ0FBQyxTQUFTLENBQUMsRUFBRTtZQUN6QixPQUFPLGtCQUFrQixDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsbUJBQXFCLFNBQVMsRUFBQSxFQUFFLFlBQVksQ0FBQyxDQUFDO1NBQ3JGO2FBQ0ksSUFBSSxPQUFPLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFDckIsSUFBQSxzREFBbUMsRUFBbEMsYUFBRyxFQUFFLGVBQTZCO1lBQ3pDLE9BQU8sa0JBQWtCLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxVQUFDLElBQVMsSUFBSyxPQUFBLFdBQVcsQ0FBQyxJQUFJLEVBQUUsS0FBRyxDQUFDLEtBQUssT0FBSyxFQUFoQyxDQUFnQyxFQUFFLFlBQVksQ0FBQyxDQUFDO1NBQ3RHO2FBQ0ksSUFBSSxTQUFTLEVBQUU7WUFDbEIsT0FBTyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLFVBQUMsSUFBSSxJQUFLLE9BQUEsSUFBSSxLQUFLLG1CQUFLLFNBQVMsRUFBQSxFQUF2QixDQUF1QixFQUFFLFlBQVksQ0FBQyxDQUFDO1NBQ3hGO2FBQ0k7WUFDSCxPQUFPLEtBQUssQ0FBQztTQUNkO0lBQ0gsQ0FBQzs7Z0JBckRGLElBQUksU0FBQztvQkFDSixJQUFJLEVBQUUsZ0JBQWdCO2lCQUN2Qjs7SUFvREQseUJBQUM7Q0FBQSxBQXRERCxJQXNEQztTQW5EWSxrQkFBa0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtICB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBpc0FycmF5LCBpc0Z1bmN0aW9uLCBnZXRQcm9wZXJ0eSwgQ29sbGVjdGlvblByZWRpY2F0ZSB9IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcclxuXHJcblxyXG5AUGlwZSh7XHJcbiAgbmFtZTogJ2ZpcnN0T3JEZWZhdWx0J1xyXG59KVxyXG5leHBvcnQgY2xhc3MgRmlyc3RPckRlZmF1bHRQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcbiAgXHJcbiAgcHJpdmF0ZSBzdGF0aWMgZmluZCAoXHJcbiAgICBpbnB1dDogYW55W10sIFxyXG4gICAgcHJlZGljYXRlOiBDb2xsZWN0aW9uUHJlZGljYXRlLFxyXG4gICAgZGVmYXVsdFZhbHVlPzogYW55XHJcbiAgKTogYW55IHtcclxuICAgIFxyXG4gICAgbGV0IGZvdW5kID0gZmFsc2U7XHJcbiAgICBsZXQgcmVzdWx0OiBhbnk7XHJcbiAgICBsZXQgaSA9IC0xO1xyXG4gICAgXHJcbiAgICB3aGlsZSAoIWZvdW5kICYmICsraSA8IGlucHV0Lmxlbmd0aCkge1xyXG4gICAgICBmb3VuZCA9IHByZWRpY2F0ZShpbnB1dFtpXSwgaSwgaW5wdXQpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBpZiAoZm91bmQpIHtcclxuICAgICAgcmVzdWx0ID0gaW5wdXRbaV07XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZGVmYXVsdFZhbHVlICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICByZXN1bHQgPSBkZWZhdWx0VmFsdWU7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG4gIFxyXG4gIHRyYW5zZm9ybSAoXHJcbiAgICBpbnB1dDogYW55LFxyXG4gICAgcHJlZGljYXRlOiBDb2xsZWN0aW9uUHJlZGljYXRlfHN0cmluZ1tdfGFueSxcclxuICAgIGRlZmF1bHRWYWx1ZT86IGFueVxyXG4gICk6IGFueSB7XHJcbiAgICBcclxuICAgIGlmICghaXNBcnJheShpbnB1dCkpIHtcclxuICAgICAgcmV0dXJuIGlucHV0XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGlmIChpc0Z1bmN0aW9uKHByZWRpY2F0ZSkpIHtcclxuICAgICAgcmV0dXJuIEZpcnN0T3JEZWZhdWx0UGlwZS5maW5kKGlucHV0LCA8Q29sbGVjdGlvblByZWRpY2F0ZT5wcmVkaWNhdGUsIGRlZmF1bHRWYWx1ZSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc0FycmF5KHByZWRpY2F0ZSkpIHtcclxuICAgICAgY29uc3QgW2tleSwgdmFsdWVdID0gPHN0cmluZ1tdPiBwcmVkaWNhdGU7XHJcbiAgICAgIHJldHVybiBGaXJzdE9yRGVmYXVsdFBpcGUuZmluZChpbnB1dCwgKGl0ZW06IGFueSkgPT4gZ2V0UHJvcGVydHkoaXRlbSwga2V5KSA9PT0gdmFsdWUsIGRlZmF1bHRWYWx1ZSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChwcmVkaWNhdGUpIHtcclxuICAgICAgcmV0dXJuIEZpcnN0T3JEZWZhdWx0UGlwZS5maW5kKGlucHV0LCAoaXRlbSkgPT4gaXRlbSA9PT0gPGFueT5wcmVkaWNhdGUsIGRlZmF1bHRWYWx1ZSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgcmV0dXJuIGlucHV0O1xyXG4gICAgfVxyXG4gIH1cclxufSJdfQ==