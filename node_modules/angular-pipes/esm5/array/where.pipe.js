/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Pipe } from '@angular/core';
import { isArray, isFunction, getProperty } from '../utils/utils';
var WherePipe = /** @class */ (function () {
    function WherePipe() {
    }
    /**
    * Support a function or a value or the shorthand ['key', value] like the lodash shorthand.
    */
    /**
     * Support a function or a value or the shorthand ['key', value] like the lodash shorthand.
     * @param {?} input
     * @param {?} fn
     * @return {?}
     */
    WherePipe.prototype.transform = /**
     * Support a function or a value or the shorthand ['key', value] like the lodash shorthand.
     * @param {?} input
     * @param {?} fn
     * @return {?}
     */
    function (input, fn) {
        if (!isArray(input)) {
            return input;
        }
        if (isFunction(fn)) {
            return input.filter(fn);
        }
        else if (isArray(fn)) {
            var _a = tslib_1.__read(fn, 2), key_1 = _a[0], value_1 = _a[1];
            return input.filter(function (item) { return getProperty(item, key_1) === value_1; });
        }
        else if (fn) {
            return input.filter(function (item) { return item === fn; });
        }
        else {
            return input;
        }
    };
    WherePipe.decorators = [
        { type: Pipe, args: [{
                    name: 'where'
                },] }
    ];
    return WherePipe;
}());
export { WherePipe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2hlcmUucGlwZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItcGlwZXMvIiwic291cmNlcyI6WyJhcnJheS93aGVyZS5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLElBQUksRUFBa0IsTUFBTSxlQUFlLENBQUM7QUFDckQsT0FBTyxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFbEU7SUFBQTtJQTZCQSxDQUFDO0lBeEJDOztNQUVFOzs7Ozs7O0lBQ0YsNkJBQVM7Ozs7OztJQUFULFVBQVcsS0FBVSxFQUFFLEVBQU87UUFFNUIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUNuQixPQUFPLEtBQUssQ0FBQTtTQUNiO1FBRUQsSUFBSSxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUU7WUFDbEIsT0FBTyxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQ3pCO2FBQ0ksSUFBSSxPQUFPLENBQUMsRUFBRSxDQUFDLEVBQUU7WUFDZCxJQUFBLDBCQUFpQixFQUFoQixhQUFHLEVBQUUsZUFBVztZQUN2QixPQUFPLEtBQUssQ0FBQyxNQUFNLENBQUMsVUFBQyxJQUFTLElBQUssT0FBQSxXQUFXLENBQUMsSUFBSSxFQUFFLEtBQUcsQ0FBQyxLQUFLLE9BQUssRUFBaEMsQ0FBZ0MsQ0FBQyxDQUFDO1NBQ3RFO2FBQ0ksSUFBSSxFQUFFLEVBQUU7WUFDWCxPQUFPLEtBQUssQ0FBQyxNQUFNLENBQUMsVUFBQyxJQUFTLElBQUssT0FBQSxJQUFJLEtBQUssRUFBRSxFQUFYLENBQVcsQ0FBQyxDQUFDO1NBQ2pEO2FBQ0k7WUFDSCxPQUFPLEtBQUssQ0FBQztTQUNkO0lBRUgsQ0FBQzs7Z0JBNUJGLElBQUksU0FBQztvQkFDSixJQUFJLEVBQUUsT0FBTztpQkFDZDs7SUEyQkQsZ0JBQUM7Q0FBQSxBQTdCRCxJQTZCQztTQTFCWSxTQUFTIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSAgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgaXNBcnJheSwgaXNGdW5jdGlvbiwgZ2V0UHJvcGVydHkgfSBmcm9tICcuLi91dGlscy91dGlscyc7XHJcblxyXG5AUGlwZSh7XHJcbiAgbmFtZTogJ3doZXJlJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgV2hlcmVQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcbiAgXHJcbiAgLyoqIFxyXG4gICogU3VwcG9ydCBhIGZ1bmN0aW9uIG9yIGEgdmFsdWUgb3IgdGhlIHNob3J0aGFuZCBbJ2tleScsIHZhbHVlXSBsaWtlIHRoZSBsb2Rhc2ggc2hvcnRoYW5kLlxyXG4gICovXHJcbiAgdHJhbnNmb3JtIChpbnB1dDogYW55LCBmbjogYW55KTogYW55IHtcclxuICAgIFxyXG4gICAgaWYgKCFpc0FycmF5KGlucHV0KSkge1xyXG4gICAgICByZXR1cm4gaW5wdXRcclxuICAgIH1cclxuICAgIFxyXG4gICAgaWYgKGlzRnVuY3Rpb24oZm4pKSB7XHJcbiAgICAgIHJldHVybiBpbnB1dC5maWx0ZXIoZm4pO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaXNBcnJheShmbikpIHtcclxuICAgICAgY29uc3QgW2tleSwgdmFsdWVdID0gZm47XHJcbiAgICAgIHJldHVybiBpbnB1dC5maWx0ZXIoKGl0ZW06IGFueSkgPT4gZ2V0UHJvcGVydHkoaXRlbSwga2V5KSA9PT0gdmFsdWUpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoZm4pIHtcclxuICAgICAgcmV0dXJuIGlucHV0LmZpbHRlcigoaXRlbTogYW55KSA9PiBpdGVtID09PSBmbik7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgcmV0dXJuIGlucHV0O1xyXG4gICAgfVxyXG4gICAgXHJcbiAgfVxyXG59Il19