/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/**
 * @param {?} value
 * @return {?}
 */
export function isUndefined(value) {
    return typeof value === 'undefined';
}
/**
 * @param {?} value
 * @return {?}
 */
export function isNull(value) {
    return value === null;
}
/**
 * @param {?} value
 * @return {?}
 */
export function isNumber(value) {
    return typeof value === 'number';
}
/**
 * @param {?} value
 * @return {?}
 */
export function isNumberFinite(value) {
    return isNumber(value) && isFinite(value);
}
// Not strict positive
/**
 * @param {?} value
 * @return {?}
 */
export function isPositive(value) {
    return value >= 0;
}
/**
 * @param {?} value
 * @return {?}
 */
export function isInteger(value) {
    // No rest, is an integer
    return (value % 1) === 0;
}
/**
 * @param {?} value
 * @return {?}
 */
export function isNil(value) {
    return value === null || typeof (value) === 'undefined';
}
/**
 * @param {?} value
 * @return {?}
 */
export function isString(value) {
    return typeof value === 'string';
}
/**
 * @param {?} value
 * @return {?}
 */
export function isObject(value) {
    return value !== null && typeof value === 'object';
}
/**
 * @param {?} value
 * @return {?}
 */
export function isArray(value) {
    return Array.isArray(value);
}
/**
 * @param {?} value
 * @return {?}
 */
export function isFunction(value) {
    return typeof value === 'function';
}
/**
 * @param {?} value
 * @param {?} decimal
 * @return {?}
 */
export function toDecimal(value, decimal) {
    return Math.round(value * Math.pow(10, decimal)) / Math.pow(10, decimal);
}
/**
 * @param {?} value
 * @return {?}
 */
export function upperFirst(value) {
    return value.slice(0, 1).toUpperCase() + value.slice(1);
}
/**
 * @param {?} method
 * @return {?}
 */
export function createRound(method) {
    // <any>Math to suppress error
    /** @type {?} */
    var func = ((/** @type {?} */ (Math)))[method];
    return function (value, precision) {
        if (precision === void 0) { precision = 0; }
        if (typeof value === 'string') {
            throw new TypeError('Rounding method needs a number');
        }
        if (typeof precision !== 'number' || isNaN(precision)) {
            precision = 0;
        }
        if (precision) {
            /** @type {?} */
            var pair = (value + "e").split('e');
            /** @type {?} */
            var val = func(pair[0] + "e" + (+pair[1] + precision));
            pair = (val + "e").split('e');
            return +(pair[0] + 'e' + (+pair[1] - precision));
        }
        return func(value);
    };
}
/**
 * @param {?} str
 * @param {?=} len
 * @param {?=} ch
 * @return {?}
 */
export function leftPad(str, len, ch) {
    if (len === void 0) { len = 0; }
    if (ch === void 0) { ch = ' '; }
    str = String(str);
    ch = toString(ch);
    /** @type {?} */
    var i = -1;
    /** @type {?} */
    var length = len - str.length;
    while (++i < length && (str.length + ch.length) <= len) {
        str = ch + str;
    }
    return str;
}
/**
 * @param {?} str
 * @param {?=} len
 * @param {?=} ch
 * @return {?}
 */
export function rightPad(str, len, ch) {
    if (len === void 0) { len = 0; }
    if (ch === void 0) { ch = ' '; }
    str = String(str);
    ch = toString(ch);
    /** @type {?} */
    var i = -1;
    /** @type {?} */
    var length = len - str.length;
    while (++i < length && (str.length + ch.length) <= len) {
        str += ch;
    }
    return str;
}
/**
 * @param {?} value
 * @return {?}
 */
export function toString(value) {
    return "" + value;
}
/**
 * @param {?} str
 * @param {?=} len
 * @param {?=} ch
 * @return {?}
 */
export function pad(str, len, ch) {
    if (len === void 0) { len = 0; }
    if (ch === void 0) { ch = ' '; }
    str = String(str);
    ch = toString(ch);
    /** @type {?} */
    var i = -1;
    /** @type {?} */
    var length = len - str.length;
    /** @type {?} */
    var left = true;
    while (++i < length) {
        /** @type {?} */
        var l = (str.length + ch.length <= len) ? (str.length + ch.length) : (str.length + 1);
        if (left) {
            str = leftPad(str, l, ch);
        }
        else {
            str = rightPad(str, l, ch);
        }
        left = !left;
    }
    return str;
}
/**
 * @param {?} input
 * @param {?=} index
 * @return {?}
 */
export function flatten(input, index) {
    if (index === void 0) { index = 0; }
    if (index >= input.length) {
        return input;
    }
    if (isArray(input[index])) {
        return flatten(input.slice(0, index).concat(input[index], input.slice(index + 1)), index);
    }
    return flatten(input, index + 1);
}
/**
 * @param {?} value
 * @param {?} key
 * @return {?}
 */
export function getProperty(value, key) {
    var e_1, _a;
    if (isNil(value) || !isObject(value)) {
        return undefined;
    }
    /** @type {?} */
    var keys = key.split('.');
    /** @type {?} */
    var result = value[(/** @type {?} */ (keys.shift()))];
    try {
        for (var keys_1 = tslib_1.__values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {
            var key_1 = keys_1_1.value;
            if (isNil(result) || !isObject(result)) {
                return undefined;
            }
            result = result[key_1];
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return result;
}
/**
 * @param {?} input
 * @param {?=} initial
 * @return {?}
 */
export function sum(input, initial) {
    if (initial === void 0) { initial = 0; }
    return input.reduce(function (previous, current) { return previous + current; }, initial);
}
// http://stackoverflow.com/questions/6274339/how-can-i-shuffle-an-array-in-javascript
/**
 * @param {?} input
 * @return {?}
 */
export function shuffle(input) {
    if (!isArray(input)) {
        return input;
    }
    /** @type {?} */
    var copy = tslib_1.__spread(input);
    for (var i = copy.length; i; --i) {
        /** @type {?} */
        var j = Math.floor(Math.random() * i);
        /** @type {?} */
        var x = copy[i - 1];
        copy[i - 1] = copy[j];
        copy[j] = x;
    }
    return copy;
}
/**
 * @param {?} collection
 * @param {?} value
 * @return {?}
 */
export function deepIndexOf(collection, value) {
    /** @type {?} */
    var index = -1;
    /** @type {?} */
    var length = collection.length;
    while (++index < length) {
        if (deepEqual(value, collection[index])) {
            return index;
        }
    }
    return -1;
}
/**
 * @param {?} a
 * @param {?} b
 * @return {?}
 */
export function deepEqual(a, b) {
    if (a === b) {
        return true;
    }
    if (!(typeof a === 'object' && typeof b === 'object')) {
        return a === b;
    }
    /** @type {?} */
    var keysA = Object.keys(a);
    /** @type {?} */
    var keysB = Object.keys(b);
    if (keysA.length !== keysB.length) {
        return false;
    }
    // Test for A's keys different from B.
    /** @type {?} */
    var hasOwn = Object.prototype.hasOwnProperty;
    for (var i = 0; i < keysA.length; i++) {
        /** @type {?} */
        var key = keysA[i];
        if (!hasOwn.call(b, keysA[i]) || !deepEqual(a[key], b[key])) {
            return false;
        }
    }
    return true;
}
/**
 * @param {?} object
 * @return {?}
 */
export function isDeepObject(object) {
    return object.__isDeepObject__;
}
/**
 * @param {?} object
 * @return {?}
 */
export function wrapDeep(object) {
    return new DeepWrapper(object);
}
/**
 * @param {?} object
 * @return {?}
 */
export function unwrapDeep(object) {
    if (isDeepObject(object)) {
        return object.data;
    }
    return object;
}
var DeepWrapper = /** @class */ (function () {
    function DeepWrapper(data) {
        this.data = data;
        this.__isDeepObject__ = true;
    }
    return DeepWrapper;
}());
export { DeepWrapper };
if (false) {
    /** @type {?} */
    DeepWrapper.prototype.__isDeepObject__;
    /** @type {?} */
    DeepWrapper.prototype.data;
}
/**
 * @param {?} input
 * @return {?}
 */
export function count(input) {
    if (!isArray(input) && !isObject(input) && !isString(input)) {
        return input;
    }
    if (isObject(input)) {
        return Object.keys(input).map(function (value) { return input[value]; }).length;
    }
    return input.length;
}
/**
 * @param {?} input
 * @return {?}
 */
export function empty(input) {
    if (!isArray(input)) {
        return input;
    }
    return input.length === 0;
}
/**
 * @param {?} input
 * @param {?} predicate
 * @return {?}
 */
export function every(input, predicate) {
    if (!isArray(input) || !predicate) {
        return input;
    }
    /** @type {?} */
    var result = true;
    /** @type {?} */
    var i = -1;
    while (++i < input.length && result) {
        result = predicate(input[i], i, input);
    }
    return result;
}
/**
 * @param {?} input
 * @param {?} predicate
 * @return {?}
 */
export function takeUntil(input, predicate) {
    /** @type {?} */
    var i = -1;
    /** @type {?} */
    var result = [];
    while (++i < input.length && !predicate(input[i], i, input)) {
        result[i] = input[i];
    }
    return result;
}
/**
 * @param {?} input
 * @param {?} predicate
 * @return {?}
 */
export function takeWhile(input, predicate) {
    return takeUntil(input, function (item, index, collection) { return !predicate(item, index, collection); });
}
//# sourceMappingURL=data:application/json;base64,