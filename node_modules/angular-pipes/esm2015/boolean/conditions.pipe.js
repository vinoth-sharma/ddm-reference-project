/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Pipe } from '@angular/core';
export class IsGreaterPipe {
    /**
     * @param {?} first
     * @param {?} second
     * @return {?}
     */
    transform(first, second) {
        return first > second;
    }
}
IsGreaterPipe.decorators = [
    { type: Pipe, args: [{
                name: 'greater'
            },] }
];
export class IsGreaterOrEqualPipe {
    /**
     * @param {?} first
     * @param {?} second
     * @return {?}
     */
    transform(first, second) {
        return first >= second;
    }
}
IsGreaterOrEqualPipe.decorators = [
    { type: Pipe, args: [{
                name: 'greaterOrEqual'
            },] }
];
export class IsLessPipe {
    /**
     * @param {?} first
     * @param {?} second
     * @return {?}
     */
    transform(first, second) {
        return first < second;
    }
}
IsLessPipe.decorators = [
    { type: Pipe, args: [{
                name: 'less'
            },] }
];
export class IsLessOrEqualPipe {
    /**
     * @param {?} first
     * @param {?} second
     * @return {?}
     */
    transform(first, second) {
        return first <= second;
    }
}
IsLessOrEqualPipe.decorators = [
    { type: Pipe, args: [{
                name: 'lessOrEqual'
            },] }
];
export class IsEqualPipe {
    /**
     * @param {?} first
     * @param {?} second
     * @return {?}
     */
    transform(first, second) {
        return first == second;
    }
}
IsEqualPipe.decorators = [
    { type: Pipe, args: [{
                name: 'equal'
            },] }
];
export class IsNotEqualPipe {
    /**
     * @param {?} first
     * @param {?} second
     * @return {?}
     */
    transform(first, second) {
        return first != second;
    }
}
IsNotEqualPipe.decorators = [
    { type: Pipe, args: [{
                name: 'notEqual'
            },] }
];
export class IsIdenticalPipe {
    /**
     * @param {?} first
     * @param {?} second
     * @return {?}
     */
    transform(first, second) {
        return first === second;
    }
}
IsIdenticalPipe.decorators = [
    { type: Pipe, args: [{
                name: 'identical'
            },] }
];
export class IsNotIdenticalPipe {
    /**
     * @param {?} first
     * @param {?} second
     * @return {?}
     */
    transform(first, second) {
        return first !== second;
    }
}
IsNotIdenticalPipe.decorators = [
    { type: Pipe, args: [{
                name: 'notIdentical'
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZGl0aW9ucy5waXBlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1waXBlcy8iLCJzb3VyY2VzIjpbImJvb2xlYW4vY29uZGl0aW9ucy5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFrQixNQUFNLGVBQWUsQ0FBQztBQU1yRCxNQUFNLE9BQU8sYUFBYTs7Ozs7O0lBRXhCLFNBQVMsQ0FBRSxLQUFVLEVBQUUsTUFBVztRQUVoQyxPQUFPLEtBQUssR0FBRyxNQUFNLENBQUM7SUFDeEIsQ0FBQzs7O1lBUkYsSUFBSSxTQUFDO2dCQUNKLElBQUksRUFBRSxTQUFTO2FBQ2hCOztBQVlELE1BQU0sT0FBTyxvQkFBb0I7Ozs7OztJQUUvQixTQUFTLENBQUUsS0FBVSxFQUFFLE1BQVc7UUFFaEMsT0FBTyxLQUFLLElBQUksTUFBTSxDQUFDO0lBQ3pCLENBQUM7OztZQVJGLElBQUksU0FBQztnQkFDSixJQUFJLEVBQUUsZ0JBQWdCO2FBQ3ZCOztBQVlELE1BQU0sT0FBTyxVQUFVOzs7Ozs7SUFFckIsU0FBUyxDQUFFLEtBQVUsRUFBRSxNQUFXO1FBRWhDLE9BQU8sS0FBSyxHQUFHLE1BQU0sQ0FBQztJQUN4QixDQUFDOzs7WUFSRixJQUFJLFNBQUM7Z0JBQ0osSUFBSSxFQUFFLE1BQU07YUFDYjs7QUFZRCxNQUFNLE9BQU8saUJBQWlCOzs7Ozs7SUFFNUIsU0FBUyxDQUFFLEtBQVUsRUFBRSxNQUFXO1FBRWhDLE9BQU8sS0FBSyxJQUFJLE1BQU0sQ0FBQztJQUN6QixDQUFDOzs7WUFSRixJQUFJLFNBQUM7Z0JBQ0osSUFBSSxFQUFFLGFBQWE7YUFDcEI7O0FBWUQsTUFBTSxPQUFPLFdBQVc7Ozs7OztJQUV0QixTQUFTLENBQUUsS0FBVSxFQUFFLE1BQVc7UUFFaEMsT0FBTyxLQUFLLElBQUksTUFBTSxDQUFDO0lBQ3pCLENBQUM7OztZQVJGLElBQUksU0FBQztnQkFDSixJQUFJLEVBQUUsT0FBTzthQUNkOztBQVlELE1BQU0sT0FBTyxjQUFjOzs7Ozs7SUFFekIsU0FBUyxDQUFFLEtBQVUsRUFBRSxNQUFXO1FBRWhDLE9BQU8sS0FBSyxJQUFJLE1BQU0sQ0FBQztJQUN6QixDQUFDOzs7WUFSRixJQUFJLFNBQUM7Z0JBQ0osSUFBSSxFQUFFLFVBQVU7YUFDakI7O0FBWUQsTUFBTSxPQUFPLGVBQWU7Ozs7OztJQUUxQixTQUFTLENBQUUsS0FBVSxFQUFFLE1BQVc7UUFFaEMsT0FBTyxLQUFLLEtBQUssTUFBTSxDQUFDO0lBQzFCLENBQUM7OztZQVJGLElBQUksU0FBQztnQkFDSixJQUFJLEVBQUUsV0FBVzthQUNsQjs7QUFZRCxNQUFNLE9BQU8sa0JBQWtCOzs7Ozs7SUFFN0IsU0FBUyxDQUFFLEtBQVUsRUFBRSxNQUFXO1FBRWhDLE9BQU8sS0FBSyxLQUFLLE1BQU0sQ0FBQztJQUMxQixDQUFDOzs7WUFSRixJQUFJLFNBQUM7Z0JBQ0osSUFBSSxFQUFFLGNBQWM7YUFDckIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtICB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuXHJcbkBQaXBlKHtcclxuICBuYW1lOiAnZ3JlYXRlcidcclxufSlcclxuZXhwb3J0IGNsYXNzIElzR3JlYXRlclBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuICBcclxuICB0cmFuc2Zvcm0gKGZpcnN0OiBhbnksIHNlY29uZDogYW55KTogYm9vbGVhbiB7XHJcbiAgICBcclxuICAgIHJldHVybiBmaXJzdCA+IHNlY29uZDtcclxuICB9XHJcbn1cclxuXHJcbkBQaXBlKHtcclxuICBuYW1lOiAnZ3JlYXRlck9yRXF1YWwnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBJc0dyZWF0ZXJPckVxdWFsUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xyXG4gIFxyXG4gIHRyYW5zZm9ybSAoZmlyc3Q6IGFueSwgc2Vjb25kOiBhbnkpOiBib29sZWFuIHtcclxuICAgIFxyXG4gICAgcmV0dXJuIGZpcnN0ID49IHNlY29uZDtcclxuICB9XHJcbn1cclxuXHJcbkBQaXBlKHtcclxuICBuYW1lOiAnbGVzcydcclxufSlcclxuZXhwb3J0IGNsYXNzIElzTGVzc1BpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuICBcclxuICB0cmFuc2Zvcm0gKGZpcnN0OiBhbnksIHNlY29uZDogYW55KTogYm9vbGVhbiB7XHJcbiAgICBcclxuICAgIHJldHVybiBmaXJzdCA8IHNlY29uZDtcclxuICB9XHJcbn1cclxuXHJcbkBQaXBlKHtcclxuICBuYW1lOiAnbGVzc09yRXF1YWwnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBJc0xlc3NPckVxdWFsUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xyXG4gIFxyXG4gIHRyYW5zZm9ybSAoZmlyc3Q6IGFueSwgc2Vjb25kOiBhbnkpOiBib29sZWFuIHtcclxuICAgIFxyXG4gICAgcmV0dXJuIGZpcnN0IDw9IHNlY29uZDtcclxuICB9XHJcbn1cclxuXHJcbkBQaXBlKHtcclxuICBuYW1lOiAnZXF1YWwnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBJc0VxdWFsUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xyXG4gIFxyXG4gIHRyYW5zZm9ybSAoZmlyc3Q6IGFueSwgc2Vjb25kOiBhbnkpOiBib29sZWFuIHtcclxuICAgIFxyXG4gICAgcmV0dXJuIGZpcnN0ID09IHNlY29uZDtcclxuICB9XHJcbn1cclxuXHJcbkBQaXBlKHtcclxuICBuYW1lOiAnbm90RXF1YWwnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBJc05vdEVxdWFsUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xyXG4gIFxyXG4gIHRyYW5zZm9ybSAoZmlyc3Q6IGFueSwgc2Vjb25kOiBhbnkpOiBib29sZWFuIHtcclxuICAgIFxyXG4gICAgcmV0dXJuIGZpcnN0ICE9IHNlY29uZDtcclxuICB9XHJcbn1cclxuXHJcbkBQaXBlKHtcclxuICBuYW1lOiAnaWRlbnRpY2FsJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgSXNJZGVudGljYWxQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcbiAgXHJcbiAgdHJhbnNmb3JtIChmaXJzdDogYW55LCBzZWNvbmQ6IGFueSk6IGJvb2xlYW4ge1xyXG4gICAgXHJcbiAgICByZXR1cm4gZmlyc3QgPT09IHNlY29uZDtcclxuICB9XHJcbn1cclxuXHJcbkBQaXBlKHtcclxuICBuYW1lOiAnbm90SWRlbnRpY2FsJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgSXNOb3RJZGVudGljYWxQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcbiAgXHJcbiAgdHJhbnNmb3JtIChmaXJzdDogYW55LCBzZWNvbmQ6IGFueSk6IGJvb2xlYW4ge1xyXG4gICAgXHJcbiAgICByZXR1cm4gZmlyc3QgIT09IHNlY29uZDtcclxuICB9XHJcbn1cclxuXHJcbiJdfQ==