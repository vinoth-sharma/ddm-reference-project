/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Pipe } from '@angular/core';
import { isNumberFinite } from '../utils/utils';
var OrdinalPipe = /** @class */ (function () {
    function OrdinalPipe() {
    }
    /**
     * @param {?} input
     * @return {?}
     */
    OrdinalPipe.prototype.transform = /**
     * @param {?} input
     * @return {?}
     */
    function (input) {
        if (!isNumberFinite(input)) {
            return 'NaN';
        }
        /** @type {?} */
        var cardinal = input.toString().charAt(input.toString().length - 1);
        switch (cardinal) {
            case '1':
                return input + 'st';
            case '2':
                return input + 'nd';
            case '3':
                return input + 'rd';
            default:
                return input + 'th';
        }
    };
    OrdinalPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'ordinal'
                },] }
    ];
    return OrdinalPipe;
}());
export { OrdinalPipe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3JkaW5hbC5waXBlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1waXBlcy8iLCJzb3VyY2VzIjpbIm1hdGgvb3JkaW5hbC5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFrQixNQUFNLGVBQWUsQ0FBQztBQUNyRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFaEQ7SUFBQTtJQXlCQSxDQUFDOzs7OztJQXBCRywrQkFBUzs7OztJQUFULFVBQVcsS0FBVTtRQUVqQixJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ3hCLE9BQU8sS0FBSyxDQUFDO1NBQ2hCOztZQUVLLFFBQVEsR0FBRyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO1FBRXJFLFFBQU8sUUFBUSxFQUFFO1lBQ2IsS0FBSyxHQUFHO2dCQUNKLE9BQU8sS0FBSyxHQUFHLElBQUksQ0FBQztZQUN4QixLQUFLLEdBQUc7Z0JBQ0osT0FBTyxLQUFLLEdBQUcsSUFBSSxDQUFDO1lBQ3hCLEtBQUssR0FBRztnQkFDSixPQUFPLEtBQUssR0FBRyxJQUFJLENBQUM7WUFDeEI7Z0JBQ0ksT0FBTyxLQUFLLEdBQUcsSUFBSSxDQUFDO1NBQzNCO0lBRUwsQ0FBQzs7Z0JBeEJKLElBQUksU0FBQztvQkFDSixJQUFJLEVBQUUsU0FBUztpQkFDaEI7O0lBdUJELGtCQUFDO0NBQUEsQUF6QkQsSUF5QkM7U0F0QlksV0FBVyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IGlzTnVtYmVyRmluaXRlIH0gZnJvbSAnLi4vdXRpbHMvdXRpbHMnO1xyXG5cclxuQFBpcGUoe1xyXG4gIG5hbWU6ICdvcmRpbmFsJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgT3JkaW5hbFBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuICBcclxuICAgIHRyYW5zZm9ybSAoaW5wdXQ6IGFueSk6IGFueSB7XHJcblxyXG4gICAgICAgIGlmICghaXNOdW1iZXJGaW5pdGUoaW5wdXQpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnTmFOJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGNhcmRpbmFsID0gaW5wdXQudG9TdHJpbmcoKS5jaGFyQXQoaW5wdXQudG9TdHJpbmcoKS5sZW5ndGggLSAxKTtcclxuXHJcbiAgICAgICAgc3dpdGNoKGNhcmRpbmFsKSB7XHJcbiAgICAgICAgICAgIGNhc2UgJzEnOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGlucHV0ICsgJ3N0JztcclxuICAgICAgICAgICAgY2FzZSAnMic6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5wdXQgKyAnbmQnO1xyXG4gICAgICAgICAgICBjYXNlICczJzpcclxuICAgICAgICAgICAgICAgIHJldHVybiBpbnB1dCArICdyZCc7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6IFxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGlucHV0ICsgJ3RoJztcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICB9XHJcbn0iXX0=