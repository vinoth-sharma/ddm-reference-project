/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
export { NgAggregatePipesModule } from './aggregate/aggregate.module';
export { NgArrayPipesModule } from './array/array.module';
export { NgBooleanPipesModule } from './boolean/boolean.module';
export { NgMathPipesModule } from './math/math.module';
export { NgObjectPipesModule } from './object/object.module';
export { NgStringPipesModule } from './string/string.module';
export { NgPipesModule } from './pipes.module';
export { GroupByPipe } from './aggregate/group-by.pipe';
export { MaxPipe } from './aggregate/max.pipe';
export { MeanPipe } from './aggregate/mean.pipe';
export { MinPipe } from './aggregate/min.pipe';
export { SumPipe } from './aggregate/sum.pipe';
export { EmptyPipe } from './array/empty.pipe';
export { HeadPipe } from './array/head.pipe';
export { InitialPipe } from './array/initial.pipe';
export { LastPipe } from './array/last.pipe';
export { JoinPipe } from './array/join.pipe';
export { TailPipe } from './array/tail.pipe';
export { UniqPipe } from './array/uniq.pipe';
export { WithoutPipe } from './array/without.pipe';
export { MapPipe } from './array/map.pipe';
export { WherePipe } from './array/where.pipe';
export { FirstOrDefaultPipe } from './array/first-or-default.pipe';
export { RangePipe } from './array/range.pipe';
export { PluckPipe } from './array/pluck.pipe';
export { ReversePipe } from './array/reverse.pipe';
export { OrderByPipe } from './array/order-by.pipe';
export { CountPipe } from './array/count.pipe';
export { SomePipe } from './array/some.pipe';
export { EveryPipe } from './array/every.pipe';
export { ShufflePipe } from './array/shuffle.pipe';
export { TakePipe } from './array/take.pipe';
export { DropPipe } from './array/drop.pipe';
export { DeepPipe } from './array/deep.pipe';
export { ChunkPipe } from './array/chunk.pipe';
export { FlattenPipe } from './array/flatten.pipe';
export { IntersectionPipe } from './array/intersection.pipe';
export { UnionPipe } from './array/union.pipe';
export { TakeWhilePipe } from './array/take-while.pipe';
export { TakeUntilPipe } from './array/take-until.pipe';
export { IsEqualPipe, IsGreaterOrEqualPipe, IsGreaterPipe, IsLessOrEqualPipe, IsIdenticalPipe, IsLessPipe, IsNotEqualPipe, IsNotIdenticalPipe } from './boolean/conditions.pipe';
export { IsArrayPipe, IsDefinedPipe, IsFunctionPipe, IsNilPipe, IsNullPipe, IsNumberPipe, IsObjectPipe, IsStringPipe, IsUndefinedPipe } from './boolean/types.pipe';
export { BytesPipe } from './math/bytes.pipe';
export { CeilPipe } from './math/ceil.pipe';
export { FloorPipe } from './math/floor.pipe';
export { RoundPipe } from './math/round.pipe';
export { DegreesPipe } from './math/degrees.pipe';
export { RadiansPipe } from './math/radians.pipe';
export { RandomPipe } from './math/random.pipe';
export { SqrtPipe } from './math/sqrt.pipe';
export { PowPipe } from './math/pow.pipe';
export { AbsPipe } from './math/abs.pipe';
export { OrdinalPipe } from './math/ordinal.pipe';
export { KeysPipe } from './object/keys.pipe';
export { ToArrayPipe } from './object/to-array.pipe';
export { DefaultsPipe } from './object/defaults.pipe';
export { LeftPadPipe } from './string/left-pad.pipe';
export { MatchPipe } from './string/match.pipe';
export { PadPipe } from './string/pad.pipe';
export { ReplacePipe } from './string/replace.pipe';
export { RightPadPipe } from './string/right-pad.pipe';
export { SplitPipe } from './string/split.pipe';
export { TestPipe } from './string/test.pipe';
export { TrimPipe } from './string/trim.pipe';
export { NewlinesPipe } from './string/newlines.pipe';
export { CapitalizePipe } from './string/capitalize.pipe';
export { UpperFirstPipe } from './string/upperfirst.pipe';
export { TemplatePipe } from './string/template.pipe';
export { EncodeURIPipe } from './string/encode-uri.pipe';
export { EncodeURIComponentPipe } from './string/encode-uri-component.pipe';
export { DecodeURIPipe } from './string/decode-uri.pipe';
export { DecodeURIComponentPipe } from './string/decode-uri-component.pipe';
export { TruncatePipe } from './string/truncate.pipe';
export { RepeatPipe } from './string/repeat.pipe';
export { SlugifyPipe } from './string/slugify.pipe';
export { StripTagsPipe } from "./string/strip-tags.pipe";
export { LatinizePipe } from "./string/latinize.pipe";
export { WrapPipe } from "./string/wrap.pipe";
export { WithPipe } from "./string/with.pipe";
export { ReverseStrPipe } from "./string/reverse-str.pipe";
//# sourceMappingURL=data:application/json;base64,