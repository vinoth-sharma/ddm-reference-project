/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Pipe } from '@angular/core';
import { isNull, isNil, isUndefined, isFunction, isArray, isString, isObject, isNumber } from '../utils/utils';
var IsNullPipe = /** @class */ (function () {
    function IsNullPipe() {
    }
    /**
     * @param {?} value
     * @return {?}
     */
    IsNullPipe.prototype.transform = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return isNull(value);
    };
    IsNullPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'isNull'
                },] }
    ];
    return IsNullPipe;
}());
export { IsNullPipe };
var IsUndefinedPipe = /** @class */ (function () {
    function IsUndefinedPipe() {
    }
    /**
     * @param {?} value
     * @return {?}
     */
    IsUndefinedPipe.prototype.transform = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return isUndefined(value);
    };
    IsUndefinedPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'isUndefined'
                },] }
    ];
    return IsUndefinedPipe;
}());
export { IsUndefinedPipe };
var IsNilPipe = /** @class */ (function () {
    function IsNilPipe() {
    }
    /**
     * @param {?} value
     * @return {?}
     */
    IsNilPipe.prototype.transform = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return isNil(value);
    };
    IsNilPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'isNil'
                },] }
    ];
    return IsNilPipe;
}());
export { IsNilPipe };
var IsFunctionPipe = /** @class */ (function () {
    function IsFunctionPipe() {
    }
    /**
     * @param {?} value
     * @return {?}
     */
    IsFunctionPipe.prototype.transform = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return isFunction(value);
    };
    IsFunctionPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'isFunction'
                },] }
    ];
    return IsFunctionPipe;
}());
export { IsFunctionPipe };
var IsNumberPipe = /** @class */ (function () {
    function IsNumberPipe() {
    }
    /**
     * @param {?} value
     * @return {?}
     */
    IsNumberPipe.prototype.transform = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return isNumber(value);
    };
    IsNumberPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'isNumber'
                },] }
    ];
    return IsNumberPipe;
}());
export { IsNumberPipe };
var IsStringPipe = /** @class */ (function () {
    function IsStringPipe() {
    }
    /**
     * @param {?} value
     * @return {?}
     */
    IsStringPipe.prototype.transform = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return isString(value);
    };
    IsStringPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'isString'
                },] }
    ];
    return IsStringPipe;
}());
export { IsStringPipe };
var IsArrayPipe = /** @class */ (function () {
    function IsArrayPipe() {
    }
    /**
     * @param {?} value
     * @return {?}
     */
    IsArrayPipe.prototype.transform = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return isArray(value);
    };
    IsArrayPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'isArray'
                },] }
    ];
    return IsArrayPipe;
}());
export { IsArrayPipe };
var IsObjectPipe = /** @class */ (function () {
    function IsObjectPipe() {
    }
    /**
     * @param {?} value
     * @return {?}
     */
    IsObjectPipe.prototype.transform = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return isObject(value);
    };
    IsObjectPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'isObject'
                },] }
    ];
    return IsObjectPipe;
}());
export { IsObjectPipe };
var IsDefinedPipe = /** @class */ (function () {
    function IsDefinedPipe() {
    }
    /**
     * @param {?} value
     * @return {?}
     */
    IsDefinedPipe.prototype.transform = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return !isUndefined(value);
    };
    IsDefinedPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'isDefined'
                },] }
    ];
    return IsDefinedPipe;
}());
export { IsDefinedPipe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZXMucGlwZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItcGlwZXMvIiwic291cmNlcyI6WyJib29sZWFuL3R5cGVzLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQWtCLE1BQU0sZUFBZSxDQUFDO0FBQ3JELE9BQU8sRUFDTCxNQUFNLEVBQ04sS0FBSyxFQUNMLFdBQVcsRUFDWCxVQUFVLEVBQ1YsT0FBTyxFQUNQLFFBQVEsRUFDUixRQUFRLEVBQ1IsUUFBUSxFQUNULE1BQU0sZ0JBQWdCLENBQUM7QUFFeEI7SUFBQTtJQVNBLENBQUM7Ozs7O0lBSkMsOEJBQVM7Ozs7SUFBVCxVQUFXLEtBQVU7UUFFbkIsT0FBTyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDdkIsQ0FBQzs7Z0JBUkYsSUFBSSxTQUFDO29CQUNKLElBQUksRUFBRSxRQUFRO2lCQUNmOztJQU9ELGlCQUFDO0NBQUEsQUFURCxJQVNDO1NBTlksVUFBVTtBQVF2QjtJQUFBO0lBU0EsQ0FBQzs7Ozs7SUFKQyxtQ0FBUzs7OztJQUFULFVBQVcsS0FBVTtRQUVuQixPQUFPLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM1QixDQUFDOztnQkFSRixJQUFJLFNBQUM7b0JBQ0osSUFBSSxFQUFFLGFBQWE7aUJBQ3BCOztJQU9ELHNCQUFDO0NBQUEsQUFURCxJQVNDO1NBTlksZUFBZTtBQVE1QjtJQUFBO0lBU0EsQ0FBQzs7Ozs7SUFKQyw2QkFBUzs7OztJQUFULFVBQVcsS0FBVTtRQUVuQixPQUFPLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0QixDQUFDOztnQkFSRixJQUFJLFNBQUM7b0JBQ0osSUFBSSxFQUFFLE9BQU87aUJBQ2Q7O0lBT0QsZ0JBQUM7Q0FBQSxBQVRELElBU0M7U0FOWSxTQUFTO0FBUXRCO0lBQUE7SUFTQSxDQUFDOzs7OztJQUpDLGtDQUFTOzs7O0lBQVQsVUFBVyxLQUFVO1FBRW5CLE9BQU8sVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzNCLENBQUM7O2dCQVJGLElBQUksU0FBQztvQkFDSixJQUFJLEVBQUUsWUFBWTtpQkFDbkI7O0lBT0QscUJBQUM7Q0FBQSxBQVRELElBU0M7U0FOWSxjQUFjO0FBUTNCO0lBQUE7SUFTQSxDQUFDOzs7OztJQUpDLGdDQUFTOzs7O0lBQVQsVUFBVyxLQUFVO1FBRW5CLE9BQU8sUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3pCLENBQUM7O2dCQVJGLElBQUksU0FBQztvQkFDSixJQUFJLEVBQUUsVUFBVTtpQkFDakI7O0lBT0QsbUJBQUM7Q0FBQSxBQVRELElBU0M7U0FOWSxZQUFZO0FBUXpCO0lBQUE7SUFTQSxDQUFDOzs7OztJQUpDLGdDQUFTOzs7O0lBQVQsVUFBVyxLQUFVO1FBRW5CLE9BQU8sUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3pCLENBQUM7O2dCQVJGLElBQUksU0FBQztvQkFDSixJQUFJLEVBQUUsVUFBVTtpQkFDakI7O0lBT0QsbUJBQUM7Q0FBQSxBQVRELElBU0M7U0FOWSxZQUFZO0FBU3pCO0lBQUE7SUFTQSxDQUFDOzs7OztJQUpDLCtCQUFTOzs7O0lBQVQsVUFBVyxLQUFVO1FBRW5CLE9BQU8sT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3hCLENBQUM7O2dCQVJGLElBQUksU0FBQztvQkFDSixJQUFJLEVBQUUsU0FBUztpQkFDaEI7O0lBT0Qsa0JBQUM7Q0FBQSxBQVRELElBU0M7U0FOWSxXQUFXO0FBUXhCO0lBQUE7SUFTQSxDQUFDOzs7OztJQUpDLGdDQUFTOzs7O0lBQVQsVUFBVyxLQUFVO1FBRW5CLE9BQU8sUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3pCLENBQUM7O2dCQVJGLElBQUksU0FBQztvQkFDSixJQUFJLEVBQUUsVUFBVTtpQkFDakI7O0lBT0QsbUJBQUM7Q0FBQSxBQVRELElBU0M7U0FOWSxZQUFZO0FBU3pCO0lBQUE7SUFTQSxDQUFDOzs7OztJQUpDLGlDQUFTOzs7O0lBQVQsVUFBVyxLQUFVO1FBRW5CLE9BQU8sQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDN0IsQ0FBQzs7Z0JBUkYsSUFBSSxTQUFDO29CQUNKLElBQUksRUFBRSxXQUFXO2lCQUNsQjs7SUFPRCxvQkFBQztDQUFBLEFBVEQsSUFTQztTQU5ZLGFBQWEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtICB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge1xyXG4gIGlzTnVsbCxcclxuICBpc05pbCxcclxuICBpc1VuZGVmaW5lZCwgXHJcbiAgaXNGdW5jdGlvbixcclxuICBpc0FycmF5LFxyXG4gIGlzU3RyaW5nLFxyXG4gIGlzT2JqZWN0LFxyXG4gIGlzTnVtYmVyIFxyXG59IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcclxuXHJcbkBQaXBlKHtcclxuICBuYW1lOiAnaXNOdWxsJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgSXNOdWxsUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xyXG4gIFxyXG4gIHRyYW5zZm9ybSAodmFsdWU6IGFueSk6IGJvb2xlYW4ge1xyXG4gICAgXHJcbiAgICByZXR1cm4gaXNOdWxsKHZhbHVlKTtcclxuICB9XHJcbn1cclxuXHJcbkBQaXBlKHtcclxuICBuYW1lOiAnaXNVbmRlZmluZWQnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBJc1VuZGVmaW5lZFBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuICBcclxuICB0cmFuc2Zvcm0gKHZhbHVlOiBhbnkpOiBib29sZWFuIHtcclxuICAgIFxyXG4gICAgcmV0dXJuIGlzVW5kZWZpbmVkKHZhbHVlKTtcclxuICB9XHJcbn1cclxuXHJcbkBQaXBlKHtcclxuICBuYW1lOiAnaXNOaWwnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBJc05pbFBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuICBcclxuICB0cmFuc2Zvcm0gKHZhbHVlOiBhbnkpOiBib29sZWFuIHtcclxuICAgIFxyXG4gICAgcmV0dXJuIGlzTmlsKHZhbHVlKTtcclxuICB9XHJcbn1cclxuXHJcbkBQaXBlKHtcclxuICBuYW1lOiAnaXNGdW5jdGlvbidcclxufSlcclxuZXhwb3J0IGNsYXNzIElzRnVuY3Rpb25QaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcbiAgXHJcbiAgdHJhbnNmb3JtICh2YWx1ZTogYW55KTogYm9vbGVhbiB7XHJcbiAgICBcclxuICAgIHJldHVybiBpc0Z1bmN0aW9uKHZhbHVlKTtcclxuICB9XHJcbn1cclxuXHJcbkBQaXBlKHtcclxuICBuYW1lOiAnaXNOdW1iZXInXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBJc051bWJlclBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuICBcclxuICB0cmFuc2Zvcm0gKHZhbHVlOiBhbnkpOiBib29sZWFuIHtcclxuICAgIFxyXG4gICAgcmV0dXJuIGlzTnVtYmVyKHZhbHVlKTtcclxuICB9XHJcbn1cclxuXHJcbkBQaXBlKHtcclxuICBuYW1lOiAnaXNTdHJpbmcnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBJc1N0cmluZ1BpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuICBcclxuICB0cmFuc2Zvcm0gKHZhbHVlOiBhbnkpOiBib29sZWFuIHtcclxuICAgIFxyXG4gICAgcmV0dXJuIGlzU3RyaW5nKHZhbHVlKTtcclxuICB9XHJcbn1cclxuXHJcblxyXG5AUGlwZSh7XHJcbiAgbmFtZTogJ2lzQXJyYXknXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBJc0FycmF5UGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xyXG4gIFxyXG4gIHRyYW5zZm9ybSAodmFsdWU6IGFueSk6IGJvb2xlYW4ge1xyXG4gICAgXHJcbiAgICByZXR1cm4gaXNBcnJheSh2YWx1ZSk7XHJcbiAgfVxyXG59XHJcblxyXG5AUGlwZSh7XHJcbiAgbmFtZTogJ2lzT2JqZWN0J1xyXG59KVxyXG5leHBvcnQgY2xhc3MgSXNPYmplY3RQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcbiAgXHJcbiAgdHJhbnNmb3JtICh2YWx1ZTogYW55KTogYm9vbGVhbiB7XHJcbiAgICBcclxuICAgIHJldHVybiBpc09iamVjdCh2YWx1ZSk7XHJcbiAgfVxyXG59XHJcblxyXG5cclxuQFBpcGUoe1xyXG4gIG5hbWU6ICdpc0RlZmluZWQnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBJc0RlZmluZWRQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcbiAgXHJcbiAgdHJhbnNmb3JtICh2YWx1ZTogYW55KTogYm9vbGVhbiB7XHJcbiAgICBcclxuICAgIHJldHVybiAhaXNVbmRlZmluZWQodmFsdWUpO1xyXG4gIH1cclxufVxyXG5cclxuIl19