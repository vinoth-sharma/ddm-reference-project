/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Pipe } from '@angular/core';
import { isNull, isNil, isUndefined, isFunction, isArray, isString, isObject, isNumber } from '../utils/utils';
export class IsNullPipe {
    /**
     * @param {?} value
     * @return {?}
     */
    transform(value) {
        return isNull(value);
    }
}
IsNullPipe.decorators = [
    { type: Pipe, args: [{
                name: 'isNull'
            },] }
];
export class IsUndefinedPipe {
    /**
     * @param {?} value
     * @return {?}
     */
    transform(value) {
        return isUndefined(value);
    }
}
IsUndefinedPipe.decorators = [
    { type: Pipe, args: [{
                name: 'isUndefined'
            },] }
];
export class IsNilPipe {
    /**
     * @param {?} value
     * @return {?}
     */
    transform(value) {
        return isNil(value);
    }
}
IsNilPipe.decorators = [
    { type: Pipe, args: [{
                name: 'isNil'
            },] }
];
export class IsFunctionPipe {
    /**
     * @param {?} value
     * @return {?}
     */
    transform(value) {
        return isFunction(value);
    }
}
IsFunctionPipe.decorators = [
    { type: Pipe, args: [{
                name: 'isFunction'
            },] }
];
export class IsNumberPipe {
    /**
     * @param {?} value
     * @return {?}
     */
    transform(value) {
        return isNumber(value);
    }
}
IsNumberPipe.decorators = [
    { type: Pipe, args: [{
                name: 'isNumber'
            },] }
];
export class IsStringPipe {
    /**
     * @param {?} value
     * @return {?}
     */
    transform(value) {
        return isString(value);
    }
}
IsStringPipe.decorators = [
    { type: Pipe, args: [{
                name: 'isString'
            },] }
];
export class IsArrayPipe {
    /**
     * @param {?} value
     * @return {?}
     */
    transform(value) {
        return isArray(value);
    }
}
IsArrayPipe.decorators = [
    { type: Pipe, args: [{
                name: 'isArray'
            },] }
];
export class IsObjectPipe {
    /**
     * @param {?} value
     * @return {?}
     */
    transform(value) {
        return isObject(value);
    }
}
IsObjectPipe.decorators = [
    { type: Pipe, args: [{
                name: 'isObject'
            },] }
];
export class IsDefinedPipe {
    /**
     * @param {?} value
     * @return {?}
     */
    transform(value) {
        return !isUndefined(value);
    }
}
IsDefinedPipe.decorators = [
    { type: Pipe, args: [{
                name: 'isDefined'
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZXMucGlwZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItcGlwZXMvIiwic291cmNlcyI6WyJib29sZWFuL3R5cGVzLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQWtCLE1BQU0sZUFBZSxDQUFDO0FBQ3JELE9BQU8sRUFDTCxNQUFNLEVBQ04sS0FBSyxFQUNMLFdBQVcsRUFDWCxVQUFVLEVBQ1YsT0FBTyxFQUNQLFFBQVEsRUFDUixRQUFRLEVBQ1IsUUFBUSxFQUNULE1BQU0sZ0JBQWdCLENBQUM7QUFLeEIsTUFBTSxPQUFPLFVBQVU7Ozs7O0lBRXJCLFNBQVMsQ0FBRSxLQUFVO1FBRW5CLE9BQU8sTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3ZCLENBQUM7OztZQVJGLElBQUksU0FBQztnQkFDSixJQUFJLEVBQUUsUUFBUTthQUNmOztBQVlELE1BQU0sT0FBTyxlQUFlOzs7OztJQUUxQixTQUFTLENBQUUsS0FBVTtRQUVuQixPQUFPLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM1QixDQUFDOzs7WUFSRixJQUFJLFNBQUM7Z0JBQ0osSUFBSSxFQUFFLGFBQWE7YUFDcEI7O0FBWUQsTUFBTSxPQUFPLFNBQVM7Ozs7O0lBRXBCLFNBQVMsQ0FBRSxLQUFVO1FBRW5CLE9BQU8sS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3RCLENBQUM7OztZQVJGLElBQUksU0FBQztnQkFDSixJQUFJLEVBQUUsT0FBTzthQUNkOztBQVlELE1BQU0sT0FBTyxjQUFjOzs7OztJQUV6QixTQUFTLENBQUUsS0FBVTtRQUVuQixPQUFPLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMzQixDQUFDOzs7WUFSRixJQUFJLFNBQUM7Z0JBQ0osSUFBSSxFQUFFLFlBQVk7YUFDbkI7O0FBWUQsTUFBTSxPQUFPLFlBQVk7Ozs7O0lBRXZCLFNBQVMsQ0FBRSxLQUFVO1FBRW5CLE9BQU8sUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3pCLENBQUM7OztZQVJGLElBQUksU0FBQztnQkFDSixJQUFJLEVBQUUsVUFBVTthQUNqQjs7QUFZRCxNQUFNLE9BQU8sWUFBWTs7Ozs7SUFFdkIsU0FBUyxDQUFFLEtBQVU7UUFFbkIsT0FBTyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDekIsQ0FBQzs7O1lBUkYsSUFBSSxTQUFDO2dCQUNKLElBQUksRUFBRSxVQUFVO2FBQ2pCOztBQWFELE1BQU0sT0FBTyxXQUFXOzs7OztJQUV0QixTQUFTLENBQUUsS0FBVTtRQUVuQixPQUFPLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN4QixDQUFDOzs7WUFSRixJQUFJLFNBQUM7Z0JBQ0osSUFBSSxFQUFFLFNBQVM7YUFDaEI7O0FBWUQsTUFBTSxPQUFPLFlBQVk7Ozs7O0lBRXZCLFNBQVMsQ0FBRSxLQUFVO1FBRW5CLE9BQU8sUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3pCLENBQUM7OztZQVJGLElBQUksU0FBQztnQkFDSixJQUFJLEVBQUUsVUFBVTthQUNqQjs7QUFhRCxNQUFNLE9BQU8sYUFBYTs7Ozs7SUFFeEIsU0FBUyxDQUFFLEtBQVU7UUFFbkIsT0FBTyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM3QixDQUFDOzs7WUFSRixJQUFJLFNBQUM7Z0JBQ0osSUFBSSxFQUFFLFdBQVc7YUFDbEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtICB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge1xyXG4gIGlzTnVsbCxcclxuICBpc05pbCxcclxuICBpc1VuZGVmaW5lZCwgXHJcbiAgaXNGdW5jdGlvbixcclxuICBpc0FycmF5LFxyXG4gIGlzU3RyaW5nLFxyXG4gIGlzT2JqZWN0LFxyXG4gIGlzTnVtYmVyIFxyXG59IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcclxuXHJcbkBQaXBlKHtcclxuICBuYW1lOiAnaXNOdWxsJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgSXNOdWxsUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xyXG4gIFxyXG4gIHRyYW5zZm9ybSAodmFsdWU6IGFueSk6IGJvb2xlYW4ge1xyXG4gICAgXHJcbiAgICByZXR1cm4gaXNOdWxsKHZhbHVlKTtcclxuICB9XHJcbn1cclxuXHJcbkBQaXBlKHtcclxuICBuYW1lOiAnaXNVbmRlZmluZWQnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBJc1VuZGVmaW5lZFBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuICBcclxuICB0cmFuc2Zvcm0gKHZhbHVlOiBhbnkpOiBib29sZWFuIHtcclxuICAgIFxyXG4gICAgcmV0dXJuIGlzVW5kZWZpbmVkKHZhbHVlKTtcclxuICB9XHJcbn1cclxuXHJcbkBQaXBlKHtcclxuICBuYW1lOiAnaXNOaWwnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBJc05pbFBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuICBcclxuICB0cmFuc2Zvcm0gKHZhbHVlOiBhbnkpOiBib29sZWFuIHtcclxuICAgIFxyXG4gICAgcmV0dXJuIGlzTmlsKHZhbHVlKTtcclxuICB9XHJcbn1cclxuXHJcbkBQaXBlKHtcclxuICBuYW1lOiAnaXNGdW5jdGlvbidcclxufSlcclxuZXhwb3J0IGNsYXNzIElzRnVuY3Rpb25QaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcbiAgXHJcbiAgdHJhbnNmb3JtICh2YWx1ZTogYW55KTogYm9vbGVhbiB7XHJcbiAgICBcclxuICAgIHJldHVybiBpc0Z1bmN0aW9uKHZhbHVlKTtcclxuICB9XHJcbn1cclxuXHJcbkBQaXBlKHtcclxuICBuYW1lOiAnaXNOdW1iZXInXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBJc051bWJlclBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuICBcclxuICB0cmFuc2Zvcm0gKHZhbHVlOiBhbnkpOiBib29sZWFuIHtcclxuICAgIFxyXG4gICAgcmV0dXJuIGlzTnVtYmVyKHZhbHVlKTtcclxuICB9XHJcbn1cclxuXHJcbkBQaXBlKHtcclxuICBuYW1lOiAnaXNTdHJpbmcnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBJc1N0cmluZ1BpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuICBcclxuICB0cmFuc2Zvcm0gKHZhbHVlOiBhbnkpOiBib29sZWFuIHtcclxuICAgIFxyXG4gICAgcmV0dXJuIGlzU3RyaW5nKHZhbHVlKTtcclxuICB9XHJcbn1cclxuXHJcblxyXG5AUGlwZSh7XHJcbiAgbmFtZTogJ2lzQXJyYXknXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBJc0FycmF5UGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xyXG4gIFxyXG4gIHRyYW5zZm9ybSAodmFsdWU6IGFueSk6IGJvb2xlYW4ge1xyXG4gICAgXHJcbiAgICByZXR1cm4gaXNBcnJheSh2YWx1ZSk7XHJcbiAgfVxyXG59XHJcblxyXG5AUGlwZSh7XHJcbiAgbmFtZTogJ2lzT2JqZWN0J1xyXG59KVxyXG5leHBvcnQgY2xhc3MgSXNPYmplY3RQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcbiAgXHJcbiAgdHJhbnNmb3JtICh2YWx1ZTogYW55KTogYm9vbGVhbiB7XHJcbiAgICBcclxuICAgIHJldHVybiBpc09iamVjdCh2YWx1ZSk7XHJcbiAgfVxyXG59XHJcblxyXG5cclxuQFBpcGUoe1xyXG4gIG5hbWU6ICdpc0RlZmluZWQnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBJc0RlZmluZWRQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcbiAgXHJcbiAgdHJhbnNmb3JtICh2YWx1ZTogYW55KTogYm9vbGVhbiB7XHJcbiAgICBcclxuICAgIHJldHVybiAhaXNVbmRlZmluZWQodmFsdWUpO1xyXG4gIH1cclxufVxyXG5cclxuIl19