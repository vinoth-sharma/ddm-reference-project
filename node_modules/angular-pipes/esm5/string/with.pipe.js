/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Pipe } from '@angular/core';
import { isString, isNull } from '../utils/utils';
var WithPipe = /** @class */ (function () {
    function WithPipe() {
    }
    /**
     * @param {?} input
     * @param {?=} start
     * @param {?=} ends
     * @param {?=} csensitive
     * @return {?}
     */
    WithPipe.prototype.transform = /**
     * @param {?} input
     * @param {?=} start
     * @param {?=} ends
     * @param {?=} csensitive
     * @return {?}
     */
    function (input, start, ends, csensitive) {
        if (start === void 0) { start = null; }
        if (ends === void 0) { ends = null; }
        if (csensitive === void 0) { csensitive = false; }
        if (!isString(input) || (isNull(start) && isNull(ends)) || (start == '') || (ends == '')) {
            return input;
        }
        input = (csensitive) ? input : input.toLowerCase();
        if (!isNull(start) && !isNull(ends)) {
            /** @type {?} */
            var a = !input.indexOf((csensitive) ? start : start.toLowerCase());
            /** @type {?} */
            var b = input.indexOf((csensitive) ? ends : ends.toLowerCase(), (input.length - ends.length)) !== -1;
            if (a == true && b == true) {
                return true;
            }
            else {
                return false;
            }
        }
        if (!isNull(start)) {
            return !input.indexOf((csensitive) ? start : start.toLowerCase());
        }
        if (!isNull(ends)) {
            /** @type {?} */
            var position = input.length - ends.length;
            return input.indexOf((csensitive) ? ends : ends.toLowerCase(), position) !== -1;
        }
    };
    WithPipe.decorators = [
        { type: Pipe, args: [{ name: 'with' },] }
    ];
    return WithPipe;
}());
export { WithPipe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2l0aC5waXBlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1waXBlcy8iLCJzb3VyY2VzIjpbInN0cmluZy93aXRoLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxJQUFJLEVBQWdCLE1BQU0sZUFBZSxDQUFDO0FBQ2xELE9BQU8sRUFBQyxRQUFRLEVBQUUsTUFBTSxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFFaEQ7SUFBQTtJQWdDQSxDQUFDOzs7Ozs7OztJQTdCQyw0QkFBUzs7Ozs7OztJQUFULFVBQVUsS0FBYSxFQUFFLEtBQXlCLEVBQUUsSUFBd0IsRUFBRSxVQUEyQjtRQUFoRixzQkFBQSxFQUFBLFlBQXlCO1FBQUUscUJBQUEsRUFBQSxXQUF3QjtRQUFFLDJCQUFBLEVBQUEsa0JBQTJCO1FBRXZHLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDLEVBQUU7WUFDeEYsT0FBTyxLQUFLLENBQUM7U0FDZDtRQUVELEtBQUssR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUVuRCxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFOztnQkFDL0IsQ0FBQyxHQUFZLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQzs7Z0JBQ3ZFLENBQUMsR0FBWSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7WUFFN0csSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxJQUFJLEVBQUU7Z0JBQzFCLE9BQU8sSUFBSSxDQUFBO2FBQ1o7aUJBQU07Z0JBQ0wsT0FBTyxLQUFLLENBQUM7YUFDZDtTQUNGO1FBRUQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUNsQixPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO1NBQ25FO1FBRUQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRTs7Z0JBQ2IsUUFBUSxHQUFRLEtBQUssQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU07WUFFOUMsT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxFQUFFLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1NBQ2pGO0lBQ0gsQ0FBQzs7Z0JBL0JGLElBQUksU0FBQyxFQUFDLElBQUksRUFBRSxNQUFNLEVBQUM7O0lBZ0NwQixlQUFDO0NBQUEsQUFoQ0QsSUFnQ0M7U0EvQlksUUFBUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7UGlwZSwgUGlwZVRyYW5zZm9ybX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7aXNTdHJpbmcsIGlzTnVsbH0gZnJvbSAnLi4vdXRpbHMvdXRpbHMnO1xyXG5cclxuQFBpcGUoe25hbWU6ICd3aXRoJ30pXHJcbmV4cG9ydCBjbGFzcyBXaXRoUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xyXG4gIFxyXG4gIHRyYW5zZm9ybShpbnB1dDogc3RyaW5nLCBzdGFydDogc3RyaW5nfG51bGwgPSBudWxsLCBlbmRzOiBzdHJpbmd8bnVsbCA9IG51bGwsIGNzZW5zaXRpdmU6IGJvb2xlYW4gPSBmYWxzZSk6IGFueSB7XHJcbiAgICBcclxuICAgIGlmICghaXNTdHJpbmcoaW5wdXQpIHx8IChpc051bGwoc3RhcnQpICYmIGlzTnVsbChlbmRzKSkgfHwgKHN0YXJ0ID09ICcnKSB8fCAoZW5kcyA9PSAnJykpIHtcclxuICAgICAgcmV0dXJuIGlucHV0O1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBpbnB1dCA9IChjc2Vuc2l0aXZlKSA/IGlucHV0IDogaW5wdXQudG9Mb3dlckNhc2UoKTtcclxuICAgIFxyXG4gICAgaWYgKCFpc051bGwoc3RhcnQpICYmICFpc051bGwoZW5kcykpIHtcclxuICAgICAgbGV0IGE6IGJvb2xlYW4gPSAhaW5wdXQuaW5kZXhPZigoY3NlbnNpdGl2ZSkgPyBzdGFydCA6IHN0YXJ0LnRvTG93ZXJDYXNlKCkpO1xyXG4gICAgICBsZXQgYjogYm9vbGVhbiA9IGlucHV0LmluZGV4T2YoKGNzZW5zaXRpdmUpID8gZW5kcyA6IGVuZHMudG9Mb3dlckNhc2UoKSwgKGlucHV0Lmxlbmd0aCAtIGVuZHMubGVuZ3RoKSkgIT09IC0xO1xyXG4gICAgICBcclxuICAgICAgaWYgKGEgPT0gdHJ1ZSAmJiBiID09IHRydWUpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBpZiAoIWlzTnVsbChzdGFydCkpIHtcclxuICAgICAgcmV0dXJuICFpbnB1dC5pbmRleE9mKChjc2Vuc2l0aXZlKSA/IHN0YXJ0IDogc3RhcnQudG9Mb3dlckNhc2UoKSk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGlmICghaXNOdWxsKGVuZHMpKSB7XHJcbiAgICAgIGxldCBwb3NpdGlvbjogYW55ID0gaW5wdXQubGVuZ3RoIC0gZW5kcy5sZW5ndGg7XHJcbiAgICAgIFxyXG4gICAgICByZXR1cm4gaW5wdXQuaW5kZXhPZigoY3NlbnNpdGl2ZSkgPyBlbmRzIDogZW5kcy50b0xvd2VyQ2FzZSgpLCBwb3NpdGlvbikgIT09IC0xO1xyXG4gICAgfVxyXG4gIH1cclxufSJdfQ==