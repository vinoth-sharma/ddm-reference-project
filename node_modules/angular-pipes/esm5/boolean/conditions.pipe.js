/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Pipe } from '@angular/core';
var IsGreaterPipe = /** @class */ (function () {
    function IsGreaterPipe() {
    }
    /**
     * @param {?} first
     * @param {?} second
     * @return {?}
     */
    IsGreaterPipe.prototype.transform = /**
     * @param {?} first
     * @param {?} second
     * @return {?}
     */
    function (first, second) {
        return first > second;
    };
    IsGreaterPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'greater'
                },] }
    ];
    return IsGreaterPipe;
}());
export { IsGreaterPipe };
var IsGreaterOrEqualPipe = /** @class */ (function () {
    function IsGreaterOrEqualPipe() {
    }
    /**
     * @param {?} first
     * @param {?} second
     * @return {?}
     */
    IsGreaterOrEqualPipe.prototype.transform = /**
     * @param {?} first
     * @param {?} second
     * @return {?}
     */
    function (first, second) {
        return first >= second;
    };
    IsGreaterOrEqualPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'greaterOrEqual'
                },] }
    ];
    return IsGreaterOrEqualPipe;
}());
export { IsGreaterOrEqualPipe };
var IsLessPipe = /** @class */ (function () {
    function IsLessPipe() {
    }
    /**
     * @param {?} first
     * @param {?} second
     * @return {?}
     */
    IsLessPipe.prototype.transform = /**
     * @param {?} first
     * @param {?} second
     * @return {?}
     */
    function (first, second) {
        return first < second;
    };
    IsLessPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'less'
                },] }
    ];
    return IsLessPipe;
}());
export { IsLessPipe };
var IsLessOrEqualPipe = /** @class */ (function () {
    function IsLessOrEqualPipe() {
    }
    /**
     * @param {?} first
     * @param {?} second
     * @return {?}
     */
    IsLessOrEqualPipe.prototype.transform = /**
     * @param {?} first
     * @param {?} second
     * @return {?}
     */
    function (first, second) {
        return first <= second;
    };
    IsLessOrEqualPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'lessOrEqual'
                },] }
    ];
    return IsLessOrEqualPipe;
}());
export { IsLessOrEqualPipe };
var IsEqualPipe = /** @class */ (function () {
    function IsEqualPipe() {
    }
    /**
     * @param {?} first
     * @param {?} second
     * @return {?}
     */
    IsEqualPipe.prototype.transform = /**
     * @param {?} first
     * @param {?} second
     * @return {?}
     */
    function (first, second) {
        return first == second;
    };
    IsEqualPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'equal'
                },] }
    ];
    return IsEqualPipe;
}());
export { IsEqualPipe };
var IsNotEqualPipe = /** @class */ (function () {
    function IsNotEqualPipe() {
    }
    /**
     * @param {?} first
     * @param {?} second
     * @return {?}
     */
    IsNotEqualPipe.prototype.transform = /**
     * @param {?} first
     * @param {?} second
     * @return {?}
     */
    function (first, second) {
        return first != second;
    };
    IsNotEqualPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'notEqual'
                },] }
    ];
    return IsNotEqualPipe;
}());
export { IsNotEqualPipe };
var IsIdenticalPipe = /** @class */ (function () {
    function IsIdenticalPipe() {
    }
    /**
     * @param {?} first
     * @param {?} second
     * @return {?}
     */
    IsIdenticalPipe.prototype.transform = /**
     * @param {?} first
     * @param {?} second
     * @return {?}
     */
    function (first, second) {
        return first === second;
    };
    IsIdenticalPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'identical'
                },] }
    ];
    return IsIdenticalPipe;
}());
export { IsIdenticalPipe };
var IsNotIdenticalPipe = /** @class */ (function () {
    function IsNotIdenticalPipe() {
    }
    /**
     * @param {?} first
     * @param {?} second
     * @return {?}
     */
    IsNotIdenticalPipe.prototype.transform = /**
     * @param {?} first
     * @param {?} second
     * @return {?}
     */
    function (first, second) {
        return first !== second;
    };
    IsNotIdenticalPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'notIdentical'
                },] }
    ];
    return IsNotIdenticalPipe;
}());
export { IsNotIdenticalPipe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZGl0aW9ucy5waXBlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1waXBlcy8iLCJzb3VyY2VzIjpbImJvb2xlYW4vY29uZGl0aW9ucy5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFrQixNQUFNLGVBQWUsQ0FBQztBQUdyRDtJQUFBO0lBU0EsQ0FBQzs7Ozs7O0lBSkMsaUNBQVM7Ozs7O0lBQVQsVUFBVyxLQUFVLEVBQUUsTUFBVztRQUVoQyxPQUFPLEtBQUssR0FBRyxNQUFNLENBQUM7SUFDeEIsQ0FBQzs7Z0JBUkYsSUFBSSxTQUFDO29CQUNKLElBQUksRUFBRSxTQUFTO2lCQUNoQjs7SUFPRCxvQkFBQztDQUFBLEFBVEQsSUFTQztTQU5ZLGFBQWE7QUFRMUI7SUFBQTtJQVNBLENBQUM7Ozs7OztJQUpDLHdDQUFTOzs7OztJQUFULFVBQVcsS0FBVSxFQUFFLE1BQVc7UUFFaEMsT0FBTyxLQUFLLElBQUksTUFBTSxDQUFDO0lBQ3pCLENBQUM7O2dCQVJGLElBQUksU0FBQztvQkFDSixJQUFJLEVBQUUsZ0JBQWdCO2lCQUN2Qjs7SUFPRCwyQkFBQztDQUFBLEFBVEQsSUFTQztTQU5ZLG9CQUFvQjtBQVFqQztJQUFBO0lBU0EsQ0FBQzs7Ozs7O0lBSkMsOEJBQVM7Ozs7O0lBQVQsVUFBVyxLQUFVLEVBQUUsTUFBVztRQUVoQyxPQUFPLEtBQUssR0FBRyxNQUFNLENBQUM7SUFDeEIsQ0FBQzs7Z0JBUkYsSUFBSSxTQUFDO29CQUNKLElBQUksRUFBRSxNQUFNO2lCQUNiOztJQU9ELGlCQUFDO0NBQUEsQUFURCxJQVNDO1NBTlksVUFBVTtBQVF2QjtJQUFBO0lBU0EsQ0FBQzs7Ozs7O0lBSkMscUNBQVM7Ozs7O0lBQVQsVUFBVyxLQUFVLEVBQUUsTUFBVztRQUVoQyxPQUFPLEtBQUssSUFBSSxNQUFNLENBQUM7SUFDekIsQ0FBQzs7Z0JBUkYsSUFBSSxTQUFDO29CQUNKLElBQUksRUFBRSxhQUFhO2lCQUNwQjs7SUFPRCx3QkFBQztDQUFBLEFBVEQsSUFTQztTQU5ZLGlCQUFpQjtBQVE5QjtJQUFBO0lBU0EsQ0FBQzs7Ozs7O0lBSkMsK0JBQVM7Ozs7O0lBQVQsVUFBVyxLQUFVLEVBQUUsTUFBVztRQUVoQyxPQUFPLEtBQUssSUFBSSxNQUFNLENBQUM7SUFDekIsQ0FBQzs7Z0JBUkYsSUFBSSxTQUFDO29CQUNKLElBQUksRUFBRSxPQUFPO2lCQUNkOztJQU9ELGtCQUFDO0NBQUEsQUFURCxJQVNDO1NBTlksV0FBVztBQVF4QjtJQUFBO0lBU0EsQ0FBQzs7Ozs7O0lBSkMsa0NBQVM7Ozs7O0lBQVQsVUFBVyxLQUFVLEVBQUUsTUFBVztRQUVoQyxPQUFPLEtBQUssSUFBSSxNQUFNLENBQUM7SUFDekIsQ0FBQzs7Z0JBUkYsSUFBSSxTQUFDO29CQUNKLElBQUksRUFBRSxVQUFVO2lCQUNqQjs7SUFPRCxxQkFBQztDQUFBLEFBVEQsSUFTQztTQU5ZLGNBQWM7QUFRM0I7SUFBQTtJQVNBLENBQUM7Ozs7OztJQUpDLG1DQUFTOzs7OztJQUFULFVBQVcsS0FBVSxFQUFFLE1BQVc7UUFFaEMsT0FBTyxLQUFLLEtBQUssTUFBTSxDQUFDO0lBQzFCLENBQUM7O2dCQVJGLElBQUksU0FBQztvQkFDSixJQUFJLEVBQUUsV0FBVztpQkFDbEI7O0lBT0Qsc0JBQUM7Q0FBQSxBQVRELElBU0M7U0FOWSxlQUFlO0FBUTVCO0lBQUE7SUFTQSxDQUFDOzs7Ozs7SUFKQyxzQ0FBUzs7Ozs7SUFBVCxVQUFXLEtBQVUsRUFBRSxNQUFXO1FBRWhDLE9BQU8sS0FBSyxLQUFLLE1BQU0sQ0FBQztJQUMxQixDQUFDOztnQkFSRixJQUFJLFNBQUM7b0JBQ0osSUFBSSxFQUFFLGNBQWM7aUJBQ3JCOztJQU9ELHlCQUFDO0NBQUEsQUFURCxJQVNDO1NBTlksa0JBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSAgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcblxyXG5AUGlwZSh7XHJcbiAgbmFtZTogJ2dyZWF0ZXInXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBJc0dyZWF0ZXJQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcbiAgXHJcbiAgdHJhbnNmb3JtIChmaXJzdDogYW55LCBzZWNvbmQ6IGFueSk6IGJvb2xlYW4ge1xyXG4gICAgXHJcbiAgICByZXR1cm4gZmlyc3QgPiBzZWNvbmQ7XHJcbiAgfVxyXG59XHJcblxyXG5AUGlwZSh7XHJcbiAgbmFtZTogJ2dyZWF0ZXJPckVxdWFsJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgSXNHcmVhdGVyT3JFcXVhbFBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuICBcclxuICB0cmFuc2Zvcm0gKGZpcnN0OiBhbnksIHNlY29uZDogYW55KTogYm9vbGVhbiB7XHJcbiAgICBcclxuICAgIHJldHVybiBmaXJzdCA+PSBzZWNvbmQ7XHJcbiAgfVxyXG59XHJcblxyXG5AUGlwZSh7XHJcbiAgbmFtZTogJ2xlc3MnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBJc0xlc3NQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcbiAgXHJcbiAgdHJhbnNmb3JtIChmaXJzdDogYW55LCBzZWNvbmQ6IGFueSk6IGJvb2xlYW4ge1xyXG4gICAgXHJcbiAgICByZXR1cm4gZmlyc3QgPCBzZWNvbmQ7XHJcbiAgfVxyXG59XHJcblxyXG5AUGlwZSh7XHJcbiAgbmFtZTogJ2xlc3NPckVxdWFsJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgSXNMZXNzT3JFcXVhbFBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuICBcclxuICB0cmFuc2Zvcm0gKGZpcnN0OiBhbnksIHNlY29uZDogYW55KTogYm9vbGVhbiB7XHJcbiAgICBcclxuICAgIHJldHVybiBmaXJzdCA8PSBzZWNvbmQ7XHJcbiAgfVxyXG59XHJcblxyXG5AUGlwZSh7XHJcbiAgbmFtZTogJ2VxdWFsJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgSXNFcXVhbFBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuICBcclxuICB0cmFuc2Zvcm0gKGZpcnN0OiBhbnksIHNlY29uZDogYW55KTogYm9vbGVhbiB7XHJcbiAgICBcclxuICAgIHJldHVybiBmaXJzdCA9PSBzZWNvbmQ7XHJcbiAgfVxyXG59XHJcblxyXG5AUGlwZSh7XHJcbiAgbmFtZTogJ25vdEVxdWFsJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgSXNOb3RFcXVhbFBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuICBcclxuICB0cmFuc2Zvcm0gKGZpcnN0OiBhbnksIHNlY29uZDogYW55KTogYm9vbGVhbiB7XHJcbiAgICBcclxuICAgIHJldHVybiBmaXJzdCAhPSBzZWNvbmQ7XHJcbiAgfVxyXG59XHJcblxyXG5AUGlwZSh7XHJcbiAgbmFtZTogJ2lkZW50aWNhbCdcclxufSlcclxuZXhwb3J0IGNsYXNzIElzSWRlbnRpY2FsUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xyXG4gIFxyXG4gIHRyYW5zZm9ybSAoZmlyc3Q6IGFueSwgc2Vjb25kOiBhbnkpOiBib29sZWFuIHtcclxuICAgIFxyXG4gICAgcmV0dXJuIGZpcnN0ID09PSBzZWNvbmQ7XHJcbiAgfVxyXG59XHJcblxyXG5AUGlwZSh7XHJcbiAgbmFtZTogJ25vdElkZW50aWNhbCdcclxufSlcclxuZXhwb3J0IGNsYXNzIElzTm90SWRlbnRpY2FsUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xyXG4gIFxyXG4gIHRyYW5zZm9ybSAoZmlyc3Q6IGFueSwgc2Vjb25kOiBhbnkpOiBib29sZWFuIHtcclxuICAgIFxyXG4gICAgcmV0dXJuIGZpcnN0ICE9PSBzZWNvbmQ7XHJcbiAgfVxyXG59XHJcblxyXG4iXX0=