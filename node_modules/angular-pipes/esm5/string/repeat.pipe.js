/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Pipe } from '@angular/core';
import { isString } from '../utils/utils';
var RepeatPipe = /** @class */ (function () {
    function RepeatPipe() {
    }
    /**
     * @param {?} input
     * @param {?=} times
     * @param {?=} characters
     * @return {?}
     */
    RepeatPipe.prototype.transform = /**
     * @param {?} input
     * @param {?=} times
     * @param {?=} characters
     * @return {?}
     */
    function (input, times, characters) {
        if (times === void 0) { times = 1; }
        if (characters === void 0) { characters = ''; }
        if (!isString(input)) {
            return input;
        }
        if (times <= 0) {
            times = 1;
        }
        /** @type {?} */
        var repeated = [input];
        for (var i = 1; i < times; ++i) {
            repeated.push(input);
        }
        return repeated.join(characters);
    };
    RepeatPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'repeat'
                },] }
    ];
    return RepeatPipe;
}());
export { RepeatPipe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVwZWF0LnBpcGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyLXBpcGVzLyIsInNvdXJjZXMiOlsic3RyaW5nL3JlcGVhdC5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUNwRCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFMUM7SUFBQTtJQXNCQSxDQUFDOzs7Ozs7O0lBakJDLDhCQUFTOzs7Ozs7SUFBVCxVQUFXLEtBQVUsRUFBRSxLQUFpQixFQUFFLFVBQXVCO1FBQTFDLHNCQUFBLEVBQUEsU0FBaUI7UUFBRSwyQkFBQSxFQUFBLGVBQXVCO1FBRS9ELElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDcEIsT0FBTyxLQUFLLENBQUM7U0FDZDtRQUVELElBQUksS0FBSyxJQUFJLENBQUMsRUFBRTtZQUNkLEtBQUssR0FBRyxDQUFDLENBQUM7U0FDWDs7WUFFSyxRQUFRLEdBQUcsQ0FBQyxLQUFLLENBQUM7UUFDeEIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssRUFBRSxFQUFFLENBQUMsRUFBRTtZQUM5QixRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFBO1NBQ3JCO1FBRUQsT0FBTyxRQUFRLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ25DLENBQUM7O2dCQXJCRixJQUFJLFNBQUM7b0JBQ0osSUFBSSxFQUFFLFFBQVE7aUJBQ2Y7O0lBb0JELGlCQUFDO0NBQUEsQUF0QkQsSUFzQkM7U0FuQlksVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgaXNTdHJpbmcgfSBmcm9tICcuLi91dGlscy91dGlscyc7XHJcblxyXG5AUGlwZSh7XHJcbiAgbmFtZTogJ3JlcGVhdCdcclxufSlcclxuZXhwb3J0IGNsYXNzIFJlcGVhdFBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuICBcclxuICB0cmFuc2Zvcm0gKGlucHV0OiBhbnksIHRpbWVzOiBudW1iZXIgPSAxLCBjaGFyYWN0ZXJzOiBzdHJpbmcgPSAnJyk6IGFueSB7XHJcbiAgICBcclxuICAgIGlmICghaXNTdHJpbmcoaW5wdXQpKSB7XHJcbiAgICAgIHJldHVybiBpbnB1dDtcclxuICAgIH1cclxuICAgIFxyXG4gICAgaWYgKHRpbWVzIDw9IDApIHtcclxuICAgICAgdGltZXMgPSAxO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBjb25zdCByZXBlYXRlZCA9IFtpbnB1dF07XHJcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IHRpbWVzOyArK2kpIHtcclxuICAgICAgcmVwZWF0ZWQucHVzaChpbnB1dClcclxuICAgIH1cclxuICAgIFxyXG4gICAgcmV0dXJuIHJlcGVhdGVkLmpvaW4oY2hhcmFjdGVycyk7XHJcbiAgfVxyXG59Il19